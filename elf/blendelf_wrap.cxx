/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_elf_color swig_types[0]
#define SWIGTYPE_p_elf_handle swig_types[1]
#define SWIGTYPE_p_elf_object swig_types[2]
#define SWIGTYPE_p_elf_vec2f swig_types[3]
#define SWIGTYPE_p_elf_vec2i swig_types[4]
#define SWIGTYPE_p_elf_vec3f swig_types[5]
#define SWIGTYPE_p_elf_vec4f swig_types[6]
static swig_type_info *swig_types[8];
static swig_module_info swig_module = {swig_types, 7, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "elf"
#define SWIG_init      luaopen_elf
#define SWIG_init_user luaopen_elf_user

#define SWIG_LUACODE   luaopen_elf_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "../gfx/gfx.h"
#include "blendelf.h"
#include "binds.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_elf_handle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle *result = 0 ;
  
  SWIG_check_num_args("handle",0,0)
  result = (elf_handle *)new elf_handle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_handle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_handle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  elf_object *arg1 = (elf_object *) 0 ;
  elf_handle *result = 0 ;
  
  SWIG_check_num_args("handle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("handle",1,"object *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_object,0))){
    SWIG_fail_ptr("new_elf_handle",1,SWIGTYPE_p_elf_object);
  }
  
  result = (elf_handle *)new elf_handle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_handle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_handle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle *arg1 = 0 ;
  elf_handle *result = 0 ;
  
  SWIG_check_num_args("handle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("handle",1,"handle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("new_elf_handle",1,SWIGTYPE_p_elf_handle);
  }
  
  result = (elf_handle *)new elf_handle((elf_handle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_handle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_handle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_elf_handle__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_elf_object, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_elf_handle__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_elf_handle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_elf_handle__SWIG_2(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_elf_handle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    elf_handle()\n"
    "    elf_handle(elf_object *)\n"
    "    elf_handle(elf_handle const &)\n");
  lua_error(L);return 0;
}


static int _wrap_elf_handle_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle *arg1 = (elf_handle *) 0 ;
  elf_object *result = 0 ;
  
  SWIG_check_num_args("get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"handle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("handle_get",1,SWIGTYPE_p_elf_handle);
  }
  
  result = (elf_object *)(arg1)->get();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_object,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_handle(void *obj) {
elf_handle *arg1 = (elf_handle *) obj;
delete arg1;
}
static swig_lua_method swig_elf_handle_methods[] = {
    {"get", _wrap_elf_handle_get}, 
    {0,0}
};
static swig_lua_attribute swig_elf_handle_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_elf_handle_bases[] = {0};
static const char *swig_elf_handle_base_names[] = {0};
static swig_lua_class _wrap_class_elf_handle = { "handle", &SWIGTYPE_p_elf_handle,_wrap_new_elf_handle, swig_delete_elf_handle, swig_elf_handle_methods, swig_elf_handle_attributes, swig_elf_handle_bases, swig_elf_handle_base_names };

static int _wrap_elf_vec2i_x_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i *arg1 = (elf_vec2i *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec2i *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2i,0))){
    SWIG_fail_ptr("vec2i_x_set",1,SWIGTYPE_p_elf_vec2i);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2i_x_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i *arg1 = (elf_vec2i *) 0 ;
  int result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec2i *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2i,0))){
    SWIG_fail_ptr("vec2i_x_get",1,SWIGTYPE_p_elf_vec2i);
  }
  
  result = (int) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2i_y_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i *arg1 = (elf_vec2i *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec2i *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2i,0))){
    SWIG_fail_ptr("vec2i_y_set",1,SWIGTYPE_p_elf_vec2i);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2i_y_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i *arg1 = (elf_vec2i *) 0 ;
  int result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec2i *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2i,0))){
    SWIG_fail_ptr("vec2i_y_get",1,SWIGTYPE_p_elf_vec2i);
  }
  
  result = (int) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_vec2i(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i *result = 0 ;
  
  SWIG_check_num_args("vec2i::elf_vec2i",0,0)
  result = (elf_vec2i *)new elf_vec2i();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_vec2i(void *obj) {
elf_vec2i *arg1 = (elf_vec2i *) obj;
delete arg1;
}
static swig_lua_method swig_elf_vec2i_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_elf_vec2i_attributes[] = {
    { "x", _wrap_elf_vec2i_x_get, _wrap_elf_vec2i_x_set},
    { "y", _wrap_elf_vec2i_y_get, _wrap_elf_vec2i_y_set},
    {0,0,0}
};
static swig_lua_class *swig_elf_vec2i_bases[] = {0};
static const char *swig_elf_vec2i_base_names[] = {0};
static swig_lua_class _wrap_class_elf_vec2i = { "vec2i", &SWIGTYPE_p_elf_vec2i,_wrap_new_elf_vec2i, swig_delete_elf_vec2i, swig_elf_vec2i_methods, swig_elf_vec2i_attributes, swig_elf_vec2i_bases, swig_elf_vec2i_base_names };

static int _wrap_elf_vec2f_x_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2f *arg1 = (elf_vec2f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2f,0))){
    SWIG_fail_ptr("vec2f_x_set",1,SWIGTYPE_p_elf_vec2f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2f_x_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2f *arg1 = (elf_vec2f *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2f,0))){
    SWIG_fail_ptr("vec2f_x_get",1,SWIGTYPE_p_elf_vec2f);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2f_y_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2f *arg1 = (elf_vec2f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2f,0))){
    SWIG_fail_ptr("vec2f_y_set",1,SWIGTYPE_p_elf_vec2f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec2f_y_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2f *arg1 = (elf_vec2f *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec2f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec2f,0))){
    SWIG_fail_ptr("vec2f_y_get",1,SWIGTYPE_p_elf_vec2f);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_vec2f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2f *result = 0 ;
  
  SWIG_check_num_args("vec2f::elf_vec2f",0,0)
  result = (elf_vec2f *)new elf_vec2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_vec2f(void *obj) {
elf_vec2f *arg1 = (elf_vec2f *) obj;
delete arg1;
}
static swig_lua_method swig_elf_vec2f_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_elf_vec2f_attributes[] = {
    { "x", _wrap_elf_vec2f_x_get, _wrap_elf_vec2f_x_set},
    { "y", _wrap_elf_vec2f_y_get, _wrap_elf_vec2f_y_set},
    {0,0,0}
};
static swig_lua_class *swig_elf_vec2f_bases[] = {0};
static const char *swig_elf_vec2f_base_names[] = {0};
static swig_lua_class _wrap_class_elf_vec2f = { "vec2f", &SWIGTYPE_p_elf_vec2f,_wrap_new_elf_vec2f, swig_delete_elf_vec2f, swig_elf_vec2f_methods, swig_elf_vec2f_attributes, swig_elf_vec2f_bases, swig_elf_vec2f_base_names };

static int _wrap_elf_vec3f_x_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_x_set",1,SWIGTYPE_p_elf_vec3f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec3f_x_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_x_get",1,SWIGTYPE_p_elf_vec3f);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec3f_y_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_y_set",1,SWIGTYPE_p_elf_vec3f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec3f_y_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_y_get",1,SWIGTYPE_p_elf_vec3f);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec3f_z_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_z_set",1,SWIGTYPE_p_elf_vec3f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec3f_z_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *arg1 = (elf_vec3f *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vec3f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("vec3f_z_get",1,SWIGTYPE_p_elf_vec3f);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_vec3f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f *result = 0 ;
  
  SWIG_check_num_args("vec3f::elf_vec3f",0,0)
  result = (elf_vec3f *)new elf_vec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_vec3f(void *obj) {
elf_vec3f *arg1 = (elf_vec3f *) obj;
delete arg1;
}
static swig_lua_method swig_elf_vec3f_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_elf_vec3f_attributes[] = {
    { "x", _wrap_elf_vec3f_x_get, _wrap_elf_vec3f_x_set},
    { "y", _wrap_elf_vec3f_y_get, _wrap_elf_vec3f_y_set},
    { "z", _wrap_elf_vec3f_z_get, _wrap_elf_vec3f_z_set},
    {0,0,0}
};
static swig_lua_class *swig_elf_vec3f_bases[] = {0};
static const char *swig_elf_vec3f_base_names[] = {0};
static swig_lua_class _wrap_class_elf_vec3f = { "vec3f", &SWIGTYPE_p_elf_vec3f,_wrap_new_elf_vec3f, swig_delete_elf_vec3f, swig_elf_vec3f_methods, swig_elf_vec3f_attributes, swig_elf_vec3f_bases, swig_elf_vec3f_base_names };

static int _wrap_elf_vec4f_x_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_x_set",1,SWIGTYPE_p_elf_vec4f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_x_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_x_get",1,SWIGTYPE_p_elf_vec4f);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_y_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_y_set",1,SWIGTYPE_p_elf_vec4f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_y_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_y_get",1,SWIGTYPE_p_elf_vec4f);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_z_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_z_set",1,SWIGTYPE_p_elf_vec4f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_z_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_z_get",1,SWIGTYPE_p_elf_vec4f);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_w_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"vec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_w_set",1,SWIGTYPE_p_elf_vec4f);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_vec4f_w_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *arg1 = (elf_vec4f *) 0 ;
  float result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"vec4f *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("vec4f_w_get",1,SWIGTYPE_p_elf_vec4f);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_vec4f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f *result = 0 ;
  
  SWIG_check_num_args("vec4f::elf_vec4f",0,0)
  result = (elf_vec4f *)new elf_vec4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_vec4f(void *obj) {
elf_vec4f *arg1 = (elf_vec4f *) obj;
delete arg1;
}
static swig_lua_method swig_elf_vec4f_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_elf_vec4f_attributes[] = {
    { "x", _wrap_elf_vec4f_x_get, _wrap_elf_vec4f_x_set},
    { "y", _wrap_elf_vec4f_y_get, _wrap_elf_vec4f_y_set},
    { "z", _wrap_elf_vec4f_z_get, _wrap_elf_vec4f_z_set},
    { "w", _wrap_elf_vec4f_w_get, _wrap_elf_vec4f_w_set},
    {0,0,0}
};
static swig_lua_class *swig_elf_vec4f_bases[] = {0};
static const char *swig_elf_vec4f_base_names[] = {0};
static swig_lua_class _wrap_class_elf_vec4f = { "vec4f", &SWIGTYPE_p_elf_vec4f,_wrap_new_elf_vec4f, swig_delete_elf_vec4f, swig_elf_vec4f_methods, swig_elf_vec4f_attributes, swig_elf_vec4f_bases, swig_elf_vec4f_base_names };

static int _wrap_elf_color_r_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_r_set",1,SWIGTYPE_p_elf_color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_r_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float result;
  
  SWIG_check_num_args("r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_r_get",1,SWIGTYPE_p_elf_color);
  }
  
  result = (float) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_g_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_g_set",1,SWIGTYPE_p_elf_color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_g_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float result;
  
  SWIG_check_num_args("g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_g_get",1,SWIGTYPE_p_elf_color);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_b_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_b_set",1,SWIGTYPE_p_elf_color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_b_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float result;
  
  SWIG_check_num_args("b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_b_get",1,SWIGTYPE_p_elf_color);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_a_set(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_a_set",1,SWIGTYPE_p_elf_color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elf_color_a_get(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *arg1 = (elf_color *) 0 ;
  float result;
  
  SWIG_check_num_args("a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_elf_color,0))){
    SWIG_fail_ptr("color_a_get",1,SWIGTYPE_p_elf_color);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_elf_color(lua_State* L) {
  int SWIG_arg = 0;
  elf_color *result = 0 ;
  
  SWIG_check_num_args("color::elf_color",0,0)
  result = (elf_color *)new elf_color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_elf_color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_elf_color(void *obj) {
elf_color *arg1 = (elf_color *) obj;
delete arg1;
}
static swig_lua_method swig_elf_color_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_elf_color_attributes[] = {
    { "r", _wrap_elf_color_r_get, _wrap_elf_color_r_set},
    { "g", _wrap_elf_color_g_get, _wrap_elf_color_g_set},
    { "b", _wrap_elf_color_b_get, _wrap_elf_color_b_set},
    { "a", _wrap_elf_color_a_get, _wrap_elf_color_a_set},
    {0,0,0}
};
static swig_lua_class *swig_elf_color_bases[] = {0};
static const char *swig_elf_color_base_names[] = {0};
static swig_lua_class _wrap_class_elf_color = { "color", &SWIGTYPE_p_elf_color,_wrap_new_elf_color, swig_delete_elf_color, swig_elf_color_methods, swig_elf_color_attributes, swig_elf_color_bases, swig_elf_color_base_names };

static int _wrap_elfIsObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsObject",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsObject",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsObject(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetObjectType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetObjectType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetObjectType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetObjectType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetObjectType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetObjectRefCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetObjectRefCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetObjectRefCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetObjectRefCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetObjectRefCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGlobalRefCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetGlobalRefCount",0,0)
  result = (int)elfGetGlobalRefCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGlobalObjCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetGlobalObjCount",0,0)
  result = (int)elfGetGlobalObjCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsActor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsActor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsActor(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsGuiObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsGuiObject",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsGuiObject",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsGuiObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsGuiObject(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("CreateList",0,0)
  result = elfCreateList();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetListLength(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetListLength",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetListLength",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetListLength",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetListLength(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfInsertToList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle arg3 ;
  elf_handle *argp1 ;
  elf_handle *argp3 ;
  
  SWIG_check_num_args("InsertToList",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("InsertToList",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InsertToList",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("InsertToList",3,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("InsertToList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("InsertToList",3,SWIGTYPE_p_elf_handle);
  }
  arg3 = *argp3;
  
  elfInsertToList(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAppendToList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AppendToList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AppendToList",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AppendToList",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AppendToList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AppendToList",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAppendToList(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveFromList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveFromList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveFromList",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveFromList",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveFromList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveFromList",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveFromList(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetItemFromList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetItemFromList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetItemFromList",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetItemFromList",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetItemFromList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetItemFromList(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfBeginList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("BeginList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BeginList",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("BeginList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfBeginList(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfNextInList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("NextInList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NextInList",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("NextInList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfNextInList(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRbeginList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("RbeginList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RbeginList",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RbeginList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfRbeginList(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRnextInList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("RnextInList",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RnextInList",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RnextInList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfRnextInList(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSeekList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SeekList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SeekList",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SeekList",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SeekList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SeekList",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSeekList(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRseekList(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("RseekList",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RseekList",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RseekList",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RseekList",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RseekList",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfRseekList(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfReadConfig(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("ReadConfig",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ReadConfig",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfReadConfig((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigWindowWidth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetConfigWindowWidth",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigWindowWidth",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigWindowWidth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetConfigWindowWidth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigWindowHeight(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetConfigWindowHeight",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigWindowHeight",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigWindowHeight",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetConfigWindowHeight(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetConfigFullscreen",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigFullscreen",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigFullscreen",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetConfigFullscreen(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigTextureAnisotropy(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetConfigTextureAnisotropy",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigTextureAnisotropy",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigTextureAnisotropy",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetConfigTextureAnisotropy(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigShadowMapSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetConfigShadowMapSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigShadowMapSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigShadowMapSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetConfigShadowMapSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigStart(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetConfigStart",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigStart",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigStart",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetConfigStart(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetConfigLog(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetConfigLog",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetConfigLog",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetConfigLog",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetConfigLog(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTitle(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SetTitle",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SetTitle",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  elfSetTitle((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetWindowWidth(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetWindowWidth",0,0)
  result = (int)elfGetWindowWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetWindowHeight(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetWindowHeight",0,0)
  result = (int)elfGetWindowHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVideoModeCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetVideoModeCount",0,0)
  result = (int)elfGetVideoModeCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVideoMode(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetVideoMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetVideoMode",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = elfGetVideoMode(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsFullscreen",0,0)
  result = (bool)elfIsFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTitle(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTitle",0,0)
  result = (char *)elfGetTitle();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMultisamples(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetMultisamples",0,0)
  result = (int)elfGetMultisamples();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTime(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("GetTime",0,0)
  result = (double)elfGetTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsWindowOpened(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsWindowOpened",0,0)
  result = (bool)elfIsWindowOpened();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i result;
  
  SWIG_check_num_args("GetMousePosition",0,0)
  result = elfGetMousePosition();
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMouseForce(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec2i result;
  
  SWIG_check_num_args("GetMouseForce",0,0)
  result = elfGetMouseForce();
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("SetMousePosition",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetMousePosition",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMousePosition",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  elfSetMousePosition(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfHideMouse(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("HideMouse",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("HideMouse",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  elfHideMouse(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsMouseHidden(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsMouseHidden",0,0)
  result = (bool)elfIsMouseHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMouseWheel(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetMouseWheel",0,0)
  result = (int)elfGetMouseWheel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMouseButtonState(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetMouseButtonState",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetMouseButtonState",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)elfGetMouseButtonState(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetKeyState(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("GetKeyState",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetKeyState",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)elfGetKeyState(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJoystickPresent(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("GetJoystickPresent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetJoystickPresent",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)elfGetJoystickPresent(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJoystickAxis(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetJoystickAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetJoystickAxis",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = elfGetJoystickAxis(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJoystickButtonState(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("GetJoystickButtonState",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetJoystickButtonState",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetJoystickButtonState",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)elfGetJoystickButtonState(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEventCount(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetEventCount",0,0)
  result = (int)elfGetEventCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEvent(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetEvent",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = elfGetEvent(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfInit(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Init",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Init",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Init",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Init",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Init",4,"bool");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Init",5,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)elfInit(arg1,arg2,(char const *)arg3,arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfInitWithConfig(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("InitWithConfig",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("InitWithConfig",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)elfInitWithConfig((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDeinit(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Deinit",0,0)
  elfDeinit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfResizeWindow(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("ResizeWindow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ResizeWindow",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ResizeWindow",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  elfResizeWindow(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPlatform(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetPlatform",0,0)
  result = (char *)elfGetPlatform();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVersionMajor(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetVersionMajor",0,0)
  result = (int)elfGetVersionMajor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVersionMinor(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetVersionMinor",0,0)
  result = (int)elfGetVersionMinor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVersionRelease(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetVersionRelease",0,0)
  result = (char *)elfGetVersionRelease();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVersion(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetVersion",0,0)
  result = (char *)elfGetVersion();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCurrentDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetCurrentDirectory",0,0)
  result = (char *)elfGetCurrentDirectory();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetErrorString(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetErrorString",0,0)
  result = (char *)elfGetErrorString();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetError(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetError",0,0)
  result = (int)elfGetError();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRun(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("Run",0,0)
  result = (bool)elfRun();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfQuit(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Quit",0,0)
  elfQuit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetF10Exit(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("SetF10Exit",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("SetF10Exit",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  elfSetF10Exit(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetF10Exit(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("GetF10Exit",0,0)
  result = (bool)elfGetF10Exit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoadScene(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("LoadScene",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LoadScene",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfLoadScene((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetScene",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetScene",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfSetScene(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("GetScene",0,0)
  result = elfGetScene();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetGui(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetGui",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetGui",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGui",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfSetGui(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGui(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("GetGui",0,0)
  result = elfGetGui();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSync(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetSync",0,0)
  result = (float)elfGetSync();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFps(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetFps",0,0)
  result = (int)elfGetFps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSaveScreenShot(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("SaveScreenShot",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SaveScreenShot",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)elfSaveScreenShot((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetFpsLimit(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("SetFpsLimit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetFpsLimit",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  elfSetFpsLimit(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFpsLimit(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetFpsLimit",0,0)
  result = (int)elfGetFpsLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTickRate(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetTickRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetTickRate",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetTickRate(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTickRate(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetTickRate",0,0)
  result = (float)elfGetTickRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetSpeed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetSpeed",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetSpeed(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetSpeed",0,0)
  result = (float)elfGetSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextureAnisotropy(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetTextureAnisotropy",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetTextureAnisotropy",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetTextureAnisotropy(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureAnisotropy(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetTextureAnisotropy",0,0)
  result = (float)elfGetTextureAnisotropy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetShadowMapSize(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("SetShadowMapSize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetShadowMapSize",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  elfSetShadowMapSize(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetShadowMapSize(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetShadowMapSize",0,0)
  result = (int)elfGetShadowMapSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPolygonsRendered(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetPolygonsRendered",0,0)
  result = (int)elfGetPolygonsRendered();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetBloom(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetBloom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetBloom",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetBloom(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableBloom(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("DisableBloom",0,0)
  elfDisableBloom();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBloomThreshold(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetBloomThreshold",0,0)
  result = (float)elfGetBloomThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetDof(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  
  SWIG_check_num_args("SetDof",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetDof",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetDof",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  elfSetDof(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableDof(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("DisableDof",0,0)
  elfDisableDof();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDofFocalRange(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetDofFocalRange",0,0)
  result = (float)elfGetDofFocalRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDofFocalDistance(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetDofFocalDistance",0,0)
  result = (float)elfGetDofFocalDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSsao(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetSsao",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetSsao",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetSsao(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableSsao(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("DisableSsao",0,0)
  elfDisableSsao();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSsaoAmount(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetSsaoAmount",0,0)
  result = (float)elfGetSsaoAmount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightShafts(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetLightShafts",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetLightShafts",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetLightShafts(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableLightShafts(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("DisableLightShafts",0,0)
  elfDisableLightShafts();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightShaftsInteisity(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetLightShaftsInteisity",0,0)
  result = (float)elfGetLightShaftsInteisity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsBloom(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsBloom",0,0)
  result = (bool)elfIsBloom();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsSsao(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsSsao",0,0)
  result = (bool)elfIsSsao();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsDof(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsDof",0,0)
  result = (bool)elfIsDof();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsLightShafts(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsLightShafts",0,0)
  result = (bool)elfIsLightShafts();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetOcclusionCulling(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("SetOcclusionCulling",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("SetOcclusionCulling",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  elfSetOcclusionCulling(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsOcclusionCulling(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsOcclusionCulling",0,0)
  result = (bool)elfIsOcclusionCulling();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetDebugDraw(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("SetDebugDraw",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("SetDebugDraw",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  elfSetDebugDraw(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsDebugDraw(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsDebugDraw",0,0)
  result = (bool)elfIsDebugDraw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("GetActor",0,0)
  result = elfGetActor();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfReadDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("ReadDirectory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ReadDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfReadDirectory((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDirectoryPath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetDirectoryPath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDirectoryPath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDirectoryPath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetDirectoryPath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDirectoryItemCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetDirectoryItemCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDirectoryItemCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDirectoryItemCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetDirectoryItemCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDirectoryItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetDirectoryItem",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDirectoryItem",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDirectoryItem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDirectoryItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetDirectoryItem(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDirectoryItemName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetDirectoryItemName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDirectoryItemName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDirectoryItemName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetDirectoryItemName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDirectoryItemType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetDirectoryItemType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDirectoryItemType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDirectoryItemType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetDirectoryItemType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateVec3f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f result;
  
  SWIG_check_num_args("CreateVec3f",0,0)
  result = elfCreateVec3f();
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateVec3fFromValues(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  elf_vec3f result;
  
  SWIG_check_num_args("CreateVec3fFromValues",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CreateVec3fFromValues",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CreateVec3fFromValues",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CreateVec3fFromValues",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = elfCreateVec3fFromValues(arg1,arg2,arg3);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateQua(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f result;
  
  SWIG_check_num_args("CreateQua",0,0)
  result = elfCreateQua();
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateQuaFromEuler(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  elf_vec4f result;
  
  SWIG_check_num_args("CreateQuaFromEuler",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CreateQuaFromEuler",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CreateQuaFromEuler",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CreateQuaFromEuler",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = elfCreateQuaFromEuler(arg1,arg2,arg3);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfMulQuaVec3f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f arg1 ;
  elf_vec3f arg2 ;
  elf_vec4f *argp1 ;
  elf_vec3f *argp2 ;
  elf_vec3f result;
  
  SWIG_check_num_args("MulQuaVec3f",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MulQuaVec3f",1,"vec4f");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MulQuaVec3f",2,"vec3f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("MulQuaVec3f",1,SWIGTYPE_p_elf_vec4f);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("MulQuaVec3f",2,SWIGTYPE_p_elf_vec3f);
  }
  arg2 = *argp2;
  
  result = elfMulQuaVec3f(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfMulQuaQua(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f arg1 ;
  elf_vec4f arg2 ;
  elf_vec4f *argp1 ;
  elf_vec4f *argp2 ;
  elf_vec4f result;
  
  SWIG_check_num_args("MulQuaQua",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MulQuaQua",1,"vec4f");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MulQuaQua",2,"vec4f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("MulQuaQua",1,SWIGTYPE_p_elf_vec4f);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("MulQuaQua",2,SWIGTYPE_p_elf_vec4f);
  }
  arg2 = *argp2;
  
  result = elfMulQuaQua(arg1,arg2);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetQuaInverted(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec4f arg1 ;
  elf_vec4f *argp1 ;
  elf_vec4f result;
  
  SWIG_check_num_args("GetQuaInverted",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetQuaInverted",1,"vec4f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec4f,0))){
    SWIG_fail_ptr("GetQuaInverted",1,SWIGTYPE_p_elf_vec4f);
  }
  arg1 = *argp1;
  
  result = elfGetQuaInverted(arg1);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSubVec3fVec3f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f arg1 ;
  elf_vec3f arg2 ;
  elf_vec3f *argp1 ;
  elf_vec3f *argp2 ;
  elf_vec3f result;
  
  SWIG_check_num_args("SubVec3fVec3f",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SubVec3fVec3f",1,"vec3f");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SubVec3fVec3f",2,"vec3f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("SubVec3fVec3f",1,SWIGTYPE_p_elf_vec3f);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("SubVec3fVec3f",2,SWIGTYPE_p_elf_vec3f);
  }
  arg2 = *argp2;
  
  result = elfSubVec3fVec3f(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddVec3fVec3f(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f arg1 ;
  elf_vec3f arg2 ;
  elf_vec3f *argp1 ;
  elf_vec3f *argp2 ;
  elf_vec3f result;
  
  SWIG_check_num_args("AddVec3fVec3f",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddVec3fVec3f",1,"vec3f");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddVec3fVec3f",2,"vec3f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("AddVec3fVec3f",1,SWIGTYPE_p_elf_vec3f);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("AddVec3fVec3f",2,SWIGTYPE_p_elf_vec3f);
  }
  arg2 = *argp2;
  
  result = elfAddVec3fVec3f(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetVec3fLength(lua_State* L) {
  int SWIG_arg = 0;
  elf_vec3f arg1 ;
  elf_vec3f *argp1 ;
  float result;
  
  SWIG_check_num_args("GetVec3fLength",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetVec3fLength",1,"vec3f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_vec3f,0))){
    SWIG_fail_ptr("GetVec3fLength",1,SWIGTYPE_p_elf_vec3f);
  }
  arg1 = *argp1;
  
  result = (float)elfGetVec3fLength(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAboutZero(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  bool result;
  
  SWIG_check_num_args("AboutZero",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AboutZero",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (bool)elfAboutZero(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfFloatAbs(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("FloatAbs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatAbs",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)elfFloatAbs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfFloatMin(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("FloatMin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatMin",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMin",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)elfFloatMin(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfFloatMax(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("FloatMax",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatMax",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMax",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)elfFloatMax(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRandomFloat(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("RandomFloat",0,0)
  result = (float)elfRandomFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRandomFloatRange(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("RandomFloatRange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RandomFloatRange",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RandomFloatRange",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)elfRandomFloatRange(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRandomInt(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("RandomInt",0,0)
  result = (int)elfRandomInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRandomIntRange(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("RandomIntRange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RandomIntRange",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RandomIntRange",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)elfRandomIntRange(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("CreateFramePlayer",0,0)
  result = elfCreateFramePlayer();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfUpdateFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("UpdateFramePlayer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("UpdateFramePlayer",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("UpdateFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfUpdateFramePlayer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetFramePlayerFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetFramePlayerFrame",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetFramePlayerFrame",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetFramePlayerFrame",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetFramePlayerFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetFramePlayerFrame(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPlayFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PlayFramePlayer",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PlayFramePlayer",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlayFramePlayer",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayFramePlayer",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PlayFramePlayer",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlayFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfPlayFramePlayer(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoopFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("LoopFramePlayer",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LoopFramePlayer",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LoopFramePlayer",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LoopFramePlayer",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LoopFramePlayer",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfLoopFramePlayer(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfStopFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("StopFramePlayer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("StopFramePlayer",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("StopFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfStopFramePlayer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPauseFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PauseFramePlayer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PauseFramePlayer",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PauseFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfPauseFramePlayer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfResumeFramePlayer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ResumeFramePlayer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ResumeFramePlayer",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ResumeFramePlayer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfResumeFramePlayer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFramePlayerStart(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetFramePlayerStart",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFramePlayerStart",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFramePlayerStart",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetFramePlayerStart(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFramePlayerEnd(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetFramePlayerEnd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFramePlayerEnd",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFramePlayerEnd",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetFramePlayerEnd(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFramePlayerSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetFramePlayerSpeed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFramePlayerSpeed",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFramePlayerSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetFramePlayerSpeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFramePlayerFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetFramePlayerFrame",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFramePlayerFrame",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFramePlayerFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetFramePlayerFrame(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsFramePlayerPlaying(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsFramePlayerPlaying",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsFramePlayerPlaying",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsFramePlayerPlaying",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsFramePlayerPlaying(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsFramePlayerPaused(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsFramePlayerPaused",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsFramePlayerPaused",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsFramePlayerPaused",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsFramePlayerPaused(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateTimer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("CreateTimer",0,0)
  result = elfCreateTimer();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfStartTimer(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("StartTimer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("StartTimer",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("StartTimer",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfStartTimer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetElapsedTime(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  double result;
  
  SWIG_check_num_args("GetElapsedTime",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetElapsedTime",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetElapsedTime",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (double)elfGetElapsedTime(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateTextureFromFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateTextureFromFile",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateTextureFromFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateTextureFromFile((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTextureName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetTextureName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTextureFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetTextureFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureWidth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextureWidth",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureWidth",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureWidth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextureWidth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureHeight(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextureHeight",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureHeight",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureHeight",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextureHeight(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureFormat(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextureFormat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureFormat",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureFormat",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextureFormat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureDataFormat(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextureDataFormat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureDataFormat",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureDataFormat",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextureDataFormat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateMaterial(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateMaterial",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateMaterial",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateMaterial((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialDiffuseColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialDiffuseColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialDiffuseColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetMaterialDiffuseColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetMaterialDiffuseColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetMaterialDiffuseColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialDiffuseColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetMaterialDiffuseColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialSpecularColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialSpecularColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialSpecularColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialSpecularColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetMaterialSpecularColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetMaterialSpecularColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetMaterialSpecularColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialSpecularColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetMaterialSpecularColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialAmbientColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialAmbientColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialAmbientColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetMaterialAmbientColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetMaterialAmbientColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetMaterialAmbientColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialAmbientColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetMaterialAmbientColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialSpecularPower(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialSpecularPower",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialSpecularPower",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialSpecularPower",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialSpecularPower",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetMaterialSpecularPower(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialLighting(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialLighting",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialLighting",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetMaterialLighting",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialLighting",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetMaterialLighting(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMaterialName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetMaterialName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetMaterialFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetMaterialFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetMaterialDiffuseColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialDiffuseColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialDiffuseColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialDiffuseColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialSpecularColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetMaterialSpecularColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialSpecularColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialSpecularColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialSpecularColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetMaterialAmbientColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialAmbientColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialAmbientColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialAmbientColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialSpecularPower(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetMaterialSpecularPower",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialSpecularPower",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialSpecularPower",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetMaterialSpecularPower(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialLighting(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetMaterialLighting",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialLighting",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialLighting",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetMaterialLighting(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialDiffuseMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetMaterialDiffuseMap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialDiffuseMap",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMaterialDiffuseMap",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialDiffuseMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialDiffuseMap",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetMaterialDiffuseMap(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialNormalMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetMaterialNormalMap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialNormalMap",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMaterialNormalMap",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialNormalMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialNormalMap",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetMaterialNormalMap(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialHeightMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetMaterialHeightMap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialHeightMap",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMaterialHeightMap",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialHeightMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialHeightMap",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetMaterialHeightMap(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialSpecularMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetMaterialSpecularMap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialSpecularMap",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMaterialSpecularMap",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialSpecularMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialSpecularMap",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetMaterialSpecularMap(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialLightMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetMaterialLightMap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialLightMap",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetMaterialLightMap",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialLightMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialLightMap",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetMaterialLightMap(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialDiffuseMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialDiffuseMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialDiffuseMap",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialDiffuseMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialDiffuseMap(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialNormalMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialNormalMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialNormalMap",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialNormalMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialNormalMap(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialHeightMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialHeightMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialHeightMap",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialHeightMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialHeightMap(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialSpecularMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialSpecularMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialSpecularMap",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialSpecularMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialSpecularMap(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialLightMap(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialLightMap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialLightMap",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialLightMap",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetMaterialLightMap(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialParallaxScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialParallaxScale",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialParallaxScale",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialParallaxScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialParallaxScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetMaterialParallaxScale(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialAlphaTest(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialAlphaTest",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialAlphaTest",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetMaterialAlphaTest",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialAlphaTest",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetMaterialAlphaTest(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetMaterialAlphaThreshold(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetMaterialAlphaThreshold",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetMaterialAlphaThreshold",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetMaterialAlphaThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetMaterialAlphaThreshold",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetMaterialAlphaThreshold(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialParallaxScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetMaterialParallaxScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialParallaxScale",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialParallaxScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetMaterialParallaxScale(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialAlphaTest(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetMaterialAlphaTest",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialAlphaTest",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialAlphaTest",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetMaterialAlphaTest(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialAlphaThreshold(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetMaterialAlphaThreshold",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialAlphaThreshold",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialAlphaThreshold",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetMaterialAlphaThreshold(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddPointToBezierCurve(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddPointToBezierCurve",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddPointToBezierCurve",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddPointToBezierCurve",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddPointToBezierCurve",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddPointToBezierCurve",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddPointToBezierCurve(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddCurveToIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("AddCurveToIpo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddCurveToIpo",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddCurveToIpo",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddCurveToIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddCurveToIpo",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfAddCurveToIpo(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetIpoLoc(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetIpoLoc",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetIpoLoc",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetIpoLoc",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetIpoLoc",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfGetIpoLoc(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetIpoRot(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetIpoRot",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetIpoRot",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetIpoRot",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetIpoRot",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfGetIpoRot(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetIpoScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetIpoScale",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetIpoScale",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetIpoScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetIpoScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfGetIpoScale(arg1,arg2);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetIpoQua(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_vec4f result;
  
  SWIG_check_num_args("GetIpoQua",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetIpoQua",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetIpoQua",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetIpoQua",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfGetIpoQua(arg1,arg2);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateProperty(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateProperty",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateProperty",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateProperty((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPropertyType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetPropertyType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPropertyType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPropertyType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetPropertyType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPropertyInt(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetPropertyInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPropertyInt",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPropertyInt",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetPropertyInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPropertyFloat(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetPropertyFloat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPropertyFloat",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPropertyFloat",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetPropertyFloat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPropertyString(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetPropertyString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPropertyString",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPropertyString",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetPropertyString(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPropertyBool(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetPropertyBool",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPropertyBool",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPropertyBool",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetPropertyBool(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPropertyInt(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetPropertyInt",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPropertyInt",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetPropertyInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPropertyInt",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetPropertyInt(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPropertyFloat(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetPropertyFloat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPropertyFloat",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetPropertyFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPropertyFloat",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetPropertyFloat(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPropertyString(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetPropertyString",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPropertyString",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetPropertyString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPropertyString",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfSetPropertyString(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPropertyBool(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetPropertyBool",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPropertyBool",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetPropertyBool",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPropertyBool",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetPropertyBool(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetActorName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetActorName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetActorFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetActorFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorScript",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorScript",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorScript",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorScript(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetActorName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfSetActorName(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetActorScript",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorScript",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetActorScript",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorScript",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorScript",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetActorScript(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorPosition",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorPosition",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorPosition",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorPosition(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorRotation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorRotation",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorRotation",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorRotation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorRotation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorRotation",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorRotation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorRotation(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorOrientation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorOrientation",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorOrientation",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorOrientation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorOrientation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorOrientation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetActorOrientation",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorOrientation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetActorOrientation(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRotateActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("RotateActor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RotateActor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RotateActor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RotateActor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RotateActor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RotateActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfRotateActor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRotateActorLocal(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("RotateActorLocal",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RotateActorLocal",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RotateActorLocal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RotateActorLocal",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RotateActorLocal",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RotateActorLocal",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfRotateActorLocal(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfMoveActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("MoveActor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MoveActor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MoveActor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MoveActor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MoveActor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("MoveActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfMoveActor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfMoveActorLocal(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("MoveActorLocal",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MoveActorLocal",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MoveActorLocal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MoveActorLocal",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MoveActorLocal",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("MoveActorLocal",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfMoveActorLocal(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorPositionRelativeTo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetActorPositionRelativeTo",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorPositionRelativeTo",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetActorPositionRelativeTo",2,"handle");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorPositionRelativeTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorPositionRelativeTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetActorPositionRelativeTo",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorPositionRelativeTo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorPositionRelativeTo",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetActorPositionRelativeTo(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorRotationRelativeTo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetActorRotationRelativeTo",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorRotationRelativeTo",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetActorRotationRelativeTo",2,"handle");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorRotationRelativeTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorRotationRelativeTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetActorRotationRelativeTo",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorRotationRelativeTo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorRotationRelativeTo",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetActorRotationRelativeTo(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorOrientationRelativeTo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetActorOrientationRelativeTo",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorOrientationRelativeTo",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetActorOrientationRelativeTo",2,"handle");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorOrientationRelativeTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorOrientationRelativeTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetActorOrientationRelativeTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SetActorOrientationRelativeTo",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorOrientationRelativeTo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorOrientationRelativeTo",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  elfSetActorOrientationRelativeTo(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorPosition",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorPosition",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorPosition(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorRotation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorRotation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorRotation",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorRotation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorRotation(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorOrientation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec4f result;
  
  SWIG_check_num_args("GetActorOrientation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorOrientation",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorOrientation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorOrientation(arg1);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorBoundingLengths(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorBoundingLengths",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorBoundingLengths",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorBoundingLengths",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorBoundingLengths",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorBoundingLengths",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorBoundingLengths",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorBoundingLengths(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorBoundingOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorBoundingOffset",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorBoundingOffset",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorBoundingOffset",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorBoundingOffset",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorBoundingOffset",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorBoundingOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorBoundingOffset(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorPhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorPhysics",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorPhysics",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorPhysics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorPhysics",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorPhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetActorPhysics(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsActorPhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsActorPhysics",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsActorPhysics",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsActorPhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsActorPhysics(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableActorPhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("DisableActorPhysics",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DisableActorPhysics",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("DisableActorPhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfDisableActorPhysics(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorDamping(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorDamping",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorDamping",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorDamping",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorDamping",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorDamping",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetActorDamping(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorSleepThresholds(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorSleepThresholds",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorSleepThresholds",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorSleepThresholds",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorSleepThresholds",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorSleepThresholds",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetActorSleepThresholds(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorRestitution(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorRestitution",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorRestitution",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorRestitution",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorRestitution",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetActorRestitution(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorAnisotropicFriction(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorAnisotropicFriction",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorAnisotropicFriction",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorAnisotropicFriction",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorAnisotropicFriction",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorAnisotropicFriction",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorAnisotropicFriction",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorAnisotropicFriction(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorLinearFactor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorLinearFactor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorLinearFactor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorLinearFactor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorLinearFactor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorLinearFactor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorLinearFactor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorAngularFactor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorAngularFactor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorAngularFactor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorAngularFactor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorAngularFactor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorAngularFactor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorAngularFactor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddForceToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("AddForceToActor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddForceToActor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddForceToActor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddForceToActor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddForceToActor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddForceToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfAddForceToActor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddForceToActorLocal(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("AddForceToActorLocal",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddForceToActorLocal",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddForceToActorLocal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddForceToActorLocal",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddForceToActorLocal",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddForceToActorLocal",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfAddForceToActorLocal(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddTorqueToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("AddTorqueToActor",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddTorqueToActor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AddTorqueToActor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AddTorqueToActor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddTorqueToActor",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddTorqueToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfAddTorqueToActor(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorLinearVelocity",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorLinearVelocity",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorLinearVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorLinearVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorLinearVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorLinearVelocity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorLinearVelocity(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorLinearVelocityLocal(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorLinearVelocityLocal",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorLinearVelocityLocal",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorLinearVelocityLocal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorLinearVelocityLocal",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorLinearVelocityLocal",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorLinearVelocityLocal",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorLinearVelocityLocal(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorAngularVelocity",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorAngularVelocity",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorAngularVelocity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetActorAngularVelocity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetActorAngularVelocity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorAngularVelocity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetActorAngularVelocity(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorBoundingLengths(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorBoundingLengths",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorBoundingLengths",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorBoundingLengths",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorBoundingLengths(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorBoundingOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorBoundingOffset",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorBoundingOffset",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorBoundingOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorBoundingOffset(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorShape(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetActorShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorShape",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorShape",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetActorShape(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorMass(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorMass",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorMass",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorMass",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorMass(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorLinearDamping",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorLinearDamping",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorLinearDamping",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorLinearDamping(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorAngularDamping",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorAngularDamping",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorAngularDamping",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorAngularDamping(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorLinearSleepThreshold(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorLinearSleepThreshold",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorLinearSleepThreshold",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorLinearSleepThreshold",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorLinearSleepThreshold(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorAngularSleepThreshold(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorAngularSleepThreshold",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorAngularSleepThreshold",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorAngularSleepThreshold",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorAngularSleepThreshold(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorRestitution(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorRestitution",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorRestitution",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorRestitution",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorRestitution(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorAnisotropicFriction(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorAnisotropicFriction",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorAnisotropicFriction",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorAnisotropicFriction",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorAnisotropicFriction(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorLinearFactor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorLinearFactor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorLinearFactor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorLinearFactor(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorAngularFactor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorAngularFactor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorAngularFactor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorAngularFactor(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorLinearVelocity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorLinearVelocity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorLinearVelocity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorLinearVelocity(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetActorAngularVelocity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorAngularVelocity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorAngularVelocity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetActorAngularVelocity(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddHingeJointToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("AddHingeJointToActor",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddHingeJointToActor",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddHingeJointToActor",2,"handle");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AddHingeJointToActor",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddHingeJointToActor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddHingeJointToActor",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddHingeJointToActor",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("AddHingeJointToActor",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("AddHingeJointToActor",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("AddHingeJointToActor",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddHingeJointToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddHingeJointToActor",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  result = elfAddHingeJointToActor(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddBallJointToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("AddBallJointToActor",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddBallJointToActor",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddBallJointToActor",2,"handle");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AddBallJointToActor",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddBallJointToActor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddBallJointToActor",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddBallJointToActor",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddBallJointToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddBallJointToActor",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = elfAddBallJointToActor(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddConeTwistJointToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("AddConeTwistJointToActor",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddConeTwistJointToActor",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddConeTwistJointToActor",2,"handle");
  if(!lua_isstring(L,3)) SWIG_fail_arg("AddConeTwistJointToActor",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("AddConeTwistJointToActor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("AddConeTwistJointToActor",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("AddConeTwistJointToActor",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("AddConeTwistJointToActor",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("AddConeTwistJointToActor",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("AddConeTwistJointToActor",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddConeTwistJointToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddConeTwistJointToActor",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  result = elfAddConeTwistJointToActor(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorJointByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorJointByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorJointByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetActorJointByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorJointByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetActorJointByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorJointByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorJointByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorJointByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetActorJointByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorJointByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetActorJointByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorJointByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorJointByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorJointByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveActorJointByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorJointByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveActorJointByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorJointByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorJointByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorJointByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveActorJointByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorJointByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveActorJointByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorJointByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorJointByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorJointByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveActorJointByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorJointByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorJointByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveActorJointByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorIpoFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorIpoFrame",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorIpoFrame",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetActorIpoFrame",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorIpoFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetActorIpoFrame(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPlayActorIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PlayActorIpo",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PlayActorIpo",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlayActorIpo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayActorIpo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PlayActorIpo",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlayActorIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfPlayActorIpo(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoopActorIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("LoopActorIpo",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LoopActorIpo",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LoopActorIpo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LoopActorIpo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LoopActorIpo",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopActorIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfLoopActorIpo(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfStopActorIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("StopActorIpo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("StopActorIpo",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("StopActorIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfStopActorIpo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPauseActorIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PauseActorIpo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PauseActorIpo",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PauseActorIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfPauseActorIpo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfResumeActorIpo(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ResumeActorIpo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ResumeActorIpo",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ResumeActorIpo",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfResumeActorIpo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorIpoStart(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorIpoStart",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorIpoStart",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorIpoStart",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorIpoStart(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorIpoEnd(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorIpoEnd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorIpoEnd",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorIpoEnd",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorIpoEnd(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorIpoSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorIpoSpeed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorIpoSpeed",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorIpoSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorIpoSpeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorIpoFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetActorIpoFrame",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorIpoFrame",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorIpoFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetActorIpoFrame(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsActorIpoPlaying(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsActorIpoPlaying",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsActorIpoPlaying",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsActorIpoPlaying",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsActorIpoPlaying(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsActorIpoPaused(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsActorIpoPaused",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsActorIpoPaused",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsActorIpoPaused",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsActorIpoPaused(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorCollisionCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetActorCollisionCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorCollisionCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorCollisionCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetActorCollisionCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorCollision(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorCollision",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorCollision",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetActorCollision",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorCollision",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetActorCollision(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorPropertyCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetActorPropertyCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorPropertyCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorPropertyCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetActorPropertyCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddPropertyToActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddPropertyToActor",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddPropertyToActor",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddPropertyToActor",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddPropertyToActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddPropertyToActor",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddPropertyToActor(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorPropertyByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorPropertyByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorPropertyByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetActorPropertyByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorPropertyByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetActorPropertyByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorPropertyByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorPropertyByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorPropertyByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetActorPropertyByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorPropertyByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetActorPropertyByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorPropertyByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorPropertyByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorPropertyByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveActorPropertyByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorPropertyByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveActorPropertyByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorPropertyByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorPropertyByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorPropertyByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveActorPropertyByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorPropertyByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveActorPropertyByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorPropertyByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorPropertyByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorPropertyByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveActorPropertyByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorPropertyByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorPropertyByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveActorPropertyByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorProperties(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("RemoveActorProperties",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorProperties",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorProperties",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfRemoveActorProperties(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetActorSelected(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetActorSelected",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetActorSelected",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetActorSelected",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetActorSelected",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetActorSelected(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorSelected(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetActorSelected",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorSelected",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorSelected",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetActorSelected(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateCamera(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateCamera",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateCamera",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateCamera((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCameraViewport(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetCameraViewport",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCameraViewport",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCameraViewport",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetCameraViewport",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetCameraViewport",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetCameraViewport",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCameraViewport",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  elfSetCameraViewport(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCameraPerspective(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetCameraPerspective",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCameraPerspective",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCameraPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetCameraPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetCameraPerspective",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetCameraPerspective",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCameraPerspective",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetCameraPerspective(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCameraOrthographic(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetCameraOrthographic",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCameraOrthographic",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetCameraOrthographic",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetCameraOrthographic",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetCameraOrthographic",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetCameraOrthographic",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SetCameraOrthographic",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SetCameraOrthographic",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCameraOrthographic",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  elfSetCameraOrthographic(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetCameraViewportSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraViewportSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraViewportSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCameraViewportSize(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraViewportOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetCameraViewportOffset",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraViewportOffset",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraViewportOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCameraViewportOffset(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraFov(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetCameraFov",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraFov",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraFov",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetCameraFov(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraAspect(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetCameraAspect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraAspect",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraAspect",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetCameraAspect(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraClip(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetCameraClip",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraClip",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraClip",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCameraClip(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraFarPlaneSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetCameraFarPlaneSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraFarPlaneSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraFarPlaneSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCameraFarPlaneSize(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfUnProjectCameraPoint(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("UnProjectCameraPoint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("UnProjectCameraPoint",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnProjectCameraPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnProjectCameraPoint",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("UnProjectCameraPoint",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("UnProjectCameraPoint",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = elfUnProjectCameraPoint(arg1,arg2,arg3,arg4);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetModelName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetModelName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetModelFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetModelFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelVerticeCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetModelVerticeCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelVerticeCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelVerticeCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetModelVerticeCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelIndiceCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetModelIndiceCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelIndiceCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelIndiceCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetModelIndiceCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelBoundingBoxMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetModelBoundingBoxMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelBoundingBoxMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelBoundingBoxMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetModelBoundingBoxMin(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelBoundingBoxMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetModelBoundingBoxMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelBoundingBoxMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelBoundingBoxMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetModelBoundingBoxMax(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateEntity(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateEntity",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateEntity",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateEntity((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetEntityScale",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityScale",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEntityScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetEntityScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetEntityScale",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetEntityScale(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetEntityScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityScale",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetEntityScale(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityModel(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetEntityModel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityModel",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetEntityModel",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityModel",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityModel",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetEntityModel(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityModel(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEntityModel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityModel",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityModel",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetEntityModel(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityMaterialCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetEntityMaterialCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityMaterialCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityMaterialCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetEntityMaterialCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddEntityMaterial(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddEntityMaterial",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddEntityMaterial",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddEntityMaterial",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddEntityMaterial",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddEntityMaterial",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddEntityMaterial(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityMaterial(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle arg3 ;
  elf_handle *argp1 ;
  elf_handle *argp3 ;
  
  SWIG_check_num_args("SetEntityMaterial",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityMaterial",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEntityMaterial",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SetEntityMaterial",3,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityMaterial",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityMaterial",3,SWIGTYPE_p_elf_handle);
  }
  arg3 = *argp3;
  
  elfSetEntityMaterial(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityMaterial(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEntityMaterial",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityMaterial",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetEntityMaterial",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityMaterial",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetEntityMaterial(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetEntityVisible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityVisible",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetEntityVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetEntityVisible(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetEntityVisible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityVisible",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetEntityVisible(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityPhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetEntityPhysics",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityPhysics",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEntityPhysics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetEntityPhysics",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityPhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetEntityPhysics(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableEntityPhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("DisableEntityPhysics",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DisableEntityPhysics",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("DisableEntityPhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfDisableEntityPhysics(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetEntityArmature",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityArmature",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetEntityArmature",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityArmature",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetEntityArmature(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetEntityArmatureFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetEntityArmatureFrame",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetEntityArmatureFrame",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetEntityArmatureFrame",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetEntityArmatureFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetEntityArmatureFrame(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPlayEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PlayEntityArmature",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PlayEntityArmature",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlayEntityArmature",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayEntityArmature",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PlayEntityArmature",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlayEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfPlayEntityArmature(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoopEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("LoopEntityArmature",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LoopEntityArmature",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LoopEntityArmature",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LoopEntityArmature",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LoopEntityArmature",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfLoopEntityArmature(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfStopEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("StopEntityArmature",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("StopEntityArmature",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("StopEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfStopEntityArmature(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPauseEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PauseEntityArmature",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PauseEntityArmature",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PauseEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfPauseEntityArmature(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfResumeEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ResumeEntityArmature",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ResumeEntityArmature",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ResumeEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfResumeEntityArmature(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityArmatureStart(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetEntityArmatureStart",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityArmatureStart",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityArmatureStart",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetEntityArmatureStart(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityArmatureEnd(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetEntityArmatureEnd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityArmatureEnd",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityArmatureEnd",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetEntityArmatureEnd(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityArmatureSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetEntityArmatureSpeed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityArmatureSpeed",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityArmatureSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetEntityArmatureSpeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityArmatureFrame(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetEntityArmatureFrame",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityArmatureFrame",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityArmatureFrame",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetEntityArmatureFrame(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsEntityArmaturePlaying(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsEntityArmaturePlaying",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsEntityArmaturePlaying",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsEntityArmaturePlaying",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsEntityArmaturePlaying(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsEntityArmaturePaused(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsEntityArmaturePaused",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsEntityArmaturePaused",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsEntityArmaturePaused",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsEntityArmaturePaused(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEntityArmature",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityArmature",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetEntityArmature(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityChanged(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetEntityChanged",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityChanged",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityChanged",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetEntityChanged(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateLight(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateLight",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateLight",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateLight((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetLightType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetLightType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetLightColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetLightColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightDistance(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetLightDistance",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightDistance",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightDistance",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetLightDistance(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightFadeSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetLightFadeSpeed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightFadeSpeed",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightFadeSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetLightFadeSpeed(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightShadowCaster(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetLightShadowCaster",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightShadowCaster",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightShadowCaster",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetLightShadowCaster(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetLightVisible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightVisible",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetLightVisible(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightCone(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetLightCone",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightCone",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightCone",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetLightCone(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsLightShaft(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsLightShaft",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsLightShaft",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsLightShaft",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsLightShaft(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightShaftSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetLightShaftSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightShaftSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightShaftSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetLightShaftSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightShaftIntensity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetLightShaftIntensity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightShaftIntensity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightShaftIntensity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetLightShaftIntensity(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightShaftFadeOff(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetLightShaftFadeOff",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightShaftFadeOff",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightShaftFadeOff",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetLightShaftFadeOff(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightType",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightType",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetLightType(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetLightColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetLightColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetLightColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetLightColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightDistance(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightDistance",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightDistance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightDistance",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetLightDistance(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightFadeSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightFadeSpeed",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightFadeSpeed",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightFadeSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightFadeSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetLightFadeSpeed(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightShadowCaster(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightShadowCaster",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightShadowCaster",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetLightShadowCaster",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightShadowCaster",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetLightShadowCaster(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightVisible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightVisible",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetLightVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetLightVisible(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightCone(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightCone",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightCone",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightCone",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetLightCone",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightCone",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetLightCone(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLightShaft(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLightShaft",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLightShaft",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetLightShaft",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetLightShaft",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetLightShaft",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLightShaft",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetLightShaft(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisableLightShaft(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("DisableLightShaft",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DisableLightShaft",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("DisableLightShaft",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfDisableLightShaft(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneArmature(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneArmature",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneArmature",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneArmature",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetBoneArmature(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneParent(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneParent",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneParent",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneParent",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetBoneParent(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneChildByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneChildByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneChildByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetBoneChildByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneChildByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetBoneChildByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneChildById(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneChildById",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneChildById",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetBoneChildById",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneChildById",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetBoneChildById(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneChildByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneChildByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneChildByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetBoneChildByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneChildByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetBoneChildByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBonePosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetBonePosition",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBonePosition",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBonePosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetBonePosition(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneRotation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetBoneRotation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneRotation",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneRotation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetBoneRotation(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneOrientation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec4f result;
  
  SWIG_check_num_args("GetBoneOrientation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetBoneOrientation",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneOrientation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetBoneOrientation(arg1);
  {
    elf_vec4f * resultptr = new elf_vec4f((const elf_vec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec4f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateArmature(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateArmature",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateArmature",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateArmature((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneFromArmatureByName(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle arg2 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneFromArmatureByName",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("GetBoneFromArmatureByName",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GetBoneFromArmatureByName",2,"handle");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneFromArmatureByName",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = elfGetBoneFromArmatureByName((char const *)arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetBoneFromArmatureById(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  elf_handle arg2 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("GetBoneFromArmatureById",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GetBoneFromArmatureById",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GetBoneFromArmatureById",2,"handle");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetBoneFromArmatureById",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = elfGetBoneFromArmatureById(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateParticles(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateParticles",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateParticles",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CreateParticles",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = elfCreateParticles((char const *)arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetParticlesName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetParticlesName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetParticlesFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetParticlesFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesMaxCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesMaxCount",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesMaxCount",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesMaxCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesMaxCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetParticlesMaxCount(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesDrawMode(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesDrawMode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesDrawMode",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesDrawMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesDrawMode",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetParticlesDrawMode(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetParticlesTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetParticlesTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetParticlesTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesModel(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetParticlesModel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesModel",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetParticlesModel",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesModel",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesModel",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetParticlesModel(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesEntity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetParticlesEntity",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesEntity",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetParticlesEntity",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesEntity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesEntity",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetParticlesEntity(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesGravity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesGravity",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesGravity",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesGravity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesGravity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesGravity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesGravity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetParticlesGravity(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesSpawnDelay(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesSpawnDelay",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesSpawnDelay",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesSpawnDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesSpawnDelay",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetParticlesSpawnDelay(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesSpawn(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesSpawn",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesSpawn",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetParticlesSpawn",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesSpawn",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetParticlesSpawn(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesSize",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesSize",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesSize",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesSize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesSize(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesSizeGrowth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesSizeGrowth",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesSizeGrowth",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesSizeGrowth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesSizeGrowth",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesSizeGrowth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesSizeGrowth(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesRotation(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesRotation",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesRotation",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesRotation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesRotation",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesRotation(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesRotationGrowth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesRotationGrowth",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesRotationGrowth",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesRotationGrowth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesRotationGrowth",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesRotationGrowth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesRotationGrowth(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesLifeSpan(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesLifeSpan",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesLifeSpan",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesLifeSpan",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesLifeSpan",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesLifeSpan",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesLifeSpan(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesFadeSpeed(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesFadeSpeed",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesFadeSpeed",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesFadeSpeed",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesFadeSpeed",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesFadeSpeed",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetParticlesFadeSpeed(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesPositionMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesPositionMin",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesPositionMin",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesPositionMin",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesPositionMin",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesPositionMin",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesPositionMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetParticlesPositionMin(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesPositionMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesPositionMax",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesPositionMax",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesPositionMax",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesPositionMax",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesPositionMax",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesPositionMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetParticlesPositionMax(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesVelocityMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesVelocityMin",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesVelocityMin",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesVelocityMin",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesVelocityMin",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesVelocityMin",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesVelocityMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetParticlesVelocityMin(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesVelocityMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesVelocityMax",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesVelocityMax",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesVelocityMax",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesVelocityMax",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesVelocityMax",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesVelocityMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetParticlesVelocityMax(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesColorMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesColorMin",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesColorMin",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesColorMin",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesColorMin",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesColorMin",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetParticlesColorMin",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesColorMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetParticlesColorMin(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetParticlesColorMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetParticlesColorMax",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetParticlesColorMax",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetParticlesColorMax",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetParticlesColorMax",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetParticlesColorMax",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetParticlesColorMax",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetParticlesColorMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetParticlesColorMax(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesMaxCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetParticlesMaxCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesMaxCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesMaxCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetParticlesMaxCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetParticlesCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetParticlesCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesDrawMode(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetParticlesDrawMode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesDrawMode",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesDrawMode",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetParticlesDrawMode(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetParticlesTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesModel(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetParticlesModel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesModel",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesModel",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesModel(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesEntity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetParticlesEntity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesEntity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesEntity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesEntity(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesGravity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetParticlesGravity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesGravity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesGravity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesGravity(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSpawnDelay(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesSpawnDelay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSpawnDelay",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSpawnDelay",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesSpawnDelay(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSpawn(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetParticlesSpawn",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSpawn",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSpawn",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetParticlesSpawn(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSizeMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesSizeMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSizeMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSizeMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesSizeMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSizeMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesSizeMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSizeMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSizeMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesSizeMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSizeGrowthMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesSizeGrowthMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSizeGrowthMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSizeGrowthMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesSizeGrowthMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesSizeGrowthMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesSizeGrowthMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesSizeGrowthMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesSizeGrowthMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesSizeGrowthMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesRotationMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesRotationMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesRotationMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesRotationMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesRotationMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesRotationMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesRotationMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesRotationMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesRotationMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesRotationMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesRotationGrowthMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesRotationGrowthMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesRotationGrowthMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesRotationGrowthMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesRotationGrowthMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesRotationGrowthMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesRotationGrowthMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesRotationGrowthMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesRotationGrowthMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesRotationGrowthMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesLifeSpanMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesLifeSpanMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesLifeSpanMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesLifeSpanMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesLifeSpanMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesLifeSpanMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesLifeSpanMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesLifeSpanMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesLifeSpanMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesLifeSpanMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesFadeSpeedMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesFadeSpeedMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesFadeSpeedMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesFadeSpeedMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesFadeSpeedMin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesFadeSpeedMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetParticlesFadeSpeedMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesFadeSpeedMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesFadeSpeedMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetParticlesFadeSpeedMax(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesPositionMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetParticlesPositionMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesPositionMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesPositionMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesPositionMin(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesPositionMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetParticlesPositionMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesPositionMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesPositionMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesPositionMax(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesVelocityMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetParticlesVelocityMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesVelocityMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesVelocityMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesVelocityMin(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesVelocityMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetParticlesVelocityMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesVelocityMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesVelocityMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesVelocityMax(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesColorMin(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetParticlesColorMin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesColorMin",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesColorMin",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesColorMin(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesColorMax(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetParticlesColorMax",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesColorMax",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesColorMax",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetParticlesColorMax(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateSprite(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateSprite",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateSprite",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateSprite((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSpriteMaterial(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetSpriteMaterial",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSpriteMaterial",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetSpriteMaterial",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSpriteMaterial",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSpriteMaterial",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetSpriteMaterial(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSpriteScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSpriteScale",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSpriteScale",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSpriteScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetSpriteScale",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSpriteScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetSpriteScale(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSpriteFaceCamera(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSpriteFaceCamera",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSpriteFaceCamera",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetSpriteFaceCamera",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSpriteFaceCamera",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetSpriteFaceCamera(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpriteMaterial(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSpriteMaterial",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSpriteMaterial",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSpriteMaterial",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSpriteMaterial(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpriteScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetSpriteScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSpriteScale",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSpriteScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSpriteScale(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpriteFaceCamera(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetSpriteFaceCamera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSpriteFaceCamera",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSpriteFaceCamera",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetSpriteFaceCamera(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateScene(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateScene",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateScene",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateScene((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateSceneFromFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateSceneFromFile",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateSceneFromFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateSceneFromFile((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSaveScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("SaveScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SaveScene",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SaveScene",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SaveScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfSaveScene(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSceneAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSceneAmbientColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSceneAmbientColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSceneAmbientColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetSceneAmbientColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetSceneAmbientColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetSceneAmbientColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSceneAmbientColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetSceneAmbientColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetSceneAmbientColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneAmbientColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneAmbientColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSceneAmbientColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSceneGravity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSceneGravity",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSceneGravity",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSceneGravity",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetSceneGravity",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetSceneGravity",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSceneGravity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  elfSetSceneGravity(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneGravity(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetSceneGravity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneGravity",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneGravity",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSceneGravity(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetScenePhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetScenePhysics",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetScenePhysics",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetScenePhysics",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScenePhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetScenePhysics(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScenePhysics(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetScenePhysics",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetScenePhysics",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetScenePhysics",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetScenePhysics(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSceneRunScripts(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSceneRunScripts",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSceneRunScripts",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetSceneRunScripts",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSceneRunScripts",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetSceneRunScripts(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneRunScripts(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetSceneRunScripts",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneRunScripts",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GetSceneRunScripts",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneRunScripts",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)elfGetSceneRunScripts(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetSceneName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetSceneName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetSceneFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetSceneFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneCameraCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneCameraCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneCameraCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneCameraCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneCameraCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneEntityCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneEntityCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneEntityCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneEntityCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneEntityCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneLightCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneLightCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneLightCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneLightCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneLightCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneArmatureCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneArmatureCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneArmatureCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneArmatureCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneArmatureCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneParticlesCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneParticlesCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneParticlesCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneParticlesCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneParticlesCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneSpriteCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSceneSpriteCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneSpriteCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneSpriteCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSceneSpriteCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddCameraToScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddCameraToScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddCameraToScene",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddCameraToScene",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddCameraToScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddCameraToScene",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddCameraToScene(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddEntityToScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddEntityToScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddEntityToScene",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddEntityToScene",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddEntityToScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddEntityToScene",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddEntityToScene(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddLightToScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddLightToScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddLightToScene",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddLightToScene",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddLightToScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddLightToScene",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddLightToScene(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddParticlesToScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddParticlesToScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddParticlesToScene",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddParticlesToScene",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddParticlesToScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddParticlesToScene",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddParticlesToScene(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddSpriteToScene(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("AddSpriteToScene",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddSpriteToScene",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddSpriteToScene",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddSpriteToScene",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddSpriteToScene",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfAddSpriteToScene(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSceneActiveCamera(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetSceneActiveCamera",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSceneActiveCamera",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetSceneActiveCamera",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSceneActiveCamera",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSceneActiveCamera",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetSceneActiveCamera(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneActiveCamera(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSceneActiveCamera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneActiveCamera",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneActiveCamera",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSceneActiveCamera(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneRayCastResult(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSceneRayCastResult",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneRayCastResult",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetSceneRayCastResult",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetSceneRayCastResult",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GetSceneRayCastResult",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GetSceneRayCastResult",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("GetSceneRayCastResult",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("GetSceneRayCastResult",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneRayCastResult",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = elfGetSceneRayCastResult(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSceneRayCastResults(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSceneRayCastResults",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSceneRayCastResults",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetSceneRayCastResults",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetSceneRayCastResults",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GetSceneRayCastResults",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GetSceneRayCastResults",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("GetSceneRayCastResults",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("GetSceneRayCastResults",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSceneRayCastResults",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = elfGetSceneRayCastResults(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDebugSceneRayCastResult(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetDebugSceneRayCastResult",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDebugSceneRayCastResult",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDebugSceneRayCastResult",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetDebugSceneRayCastResult",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GetDebugSceneRayCastResult",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GetDebugSceneRayCastResult",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("GetDebugSceneRayCastResult",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("GetDebugSceneRayCastResult",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDebugSceneRayCastResult",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = elfGetDebugSceneRayCastResult(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetDebugSceneRayCastResults(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetDebugSceneRayCastResults",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetDebugSceneRayCastResults",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetDebugSceneRayCastResults",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GetDebugSceneRayCastResults",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GetDebugSceneRayCastResults",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GetDebugSceneRayCastResults",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("GetDebugSceneRayCastResults",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("GetDebugSceneRayCastResults",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetDebugSceneRayCastResults",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = elfGetDebugSceneRayCastResults(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetCameraByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetCameraByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetCameraByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEntityByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetEntityByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetEntityByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetLightByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetLightByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetLightByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetArmatureByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetArmatureByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetArmatureByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetArmatureByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetArmatureByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetArmatureByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetParticlesByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetParticlesByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetParticlesByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpriteByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSpriteByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSpriteByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetSpriteByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSpriteByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetSpriteByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextureByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetTextureByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextureByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetTextureByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextureByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetTextureByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetMaterialByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetMaterialByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetMaterialByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetMaterialByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetMaterialByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetMaterialByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetModelByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetModelByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetModelByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetModelByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetModelByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetModelByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScriptByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetScriptByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetScriptByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetScriptByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetScriptByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetScriptByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCameraByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetCameraByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCameraByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetCameraByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCameraByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetCameraByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetEntityByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetEntityByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetEntityByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetEntityByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetEntityByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetEntityByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLightByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetLightByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLightByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetLightByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLightByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetLightByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetArmatureByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetArmatureByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetArmatureByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetArmatureByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetArmatureByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetArmatureByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetParticlesByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetParticlesByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetParticlesByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetParticlesByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetParticlesByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetParticlesByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSpriteByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSpriteByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSpriteByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetSpriteByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSpriteByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetSpriteByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetActorByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetActorByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetActorByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetActorByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetActorByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetActorByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveCameraByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveCameraByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveCameraByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveCameraByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveCameraByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveCameraByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveEntityByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveEntityByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveEntityByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveEntityByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveEntityByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveEntityByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveLightByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveLightByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveLightByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveLightByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveLightByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveLightByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveParticlesByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveParticlesByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveParticlesByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveParticlesByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveParticlesByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveParticlesByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveSpriteByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveSpriteByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveSpriteByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveSpriteByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveSpriteByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveSpriteByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveCameraByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveCameraByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveCameraByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveCameraByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveCameraByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveCameraByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveEntityByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveEntityByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveEntityByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveEntityByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveEntityByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveEntityByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveLightByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveLightByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveLightByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveLightByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveLightByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveLightByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveParticlesByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveParticlesByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveParticlesByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveParticlesByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveParticlesByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveParticlesByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveSpriteByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveSpriteByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveSpriteByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveSpriteByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveSpriteByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveSpriteByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveCameraByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveCameraByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveCameraByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveCameraByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveCameraByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveCameraByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveCameraByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveEntityByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveEntityByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveEntityByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveEntityByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveEntityByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveEntityByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveEntityByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveLightByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveLightByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveLightByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveLightByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveLightByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveLightByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveLightByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveParticlesByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveParticlesByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveParticlesByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveParticlesByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveParticlesByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveParticlesByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveParticlesByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveSpriteByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveSpriteByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveSpriteByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveSpriteByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveSpriteByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveSpriteByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveSpriteByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveActorByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveActorByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveActorByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveActorByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveActorByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveActorByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("CreateScript",0,0)
  result = elfCreateScript();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateScriptFromFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateScriptFromFile",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateScriptFromFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateScriptFromFile((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScriptName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetScriptName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetScriptName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetScriptName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetScriptName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScriptFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetScriptFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetScriptFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetScriptFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetScriptFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetScriptText(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetScriptText",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetScriptText",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetScriptText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScriptText",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfSetScriptText(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsScriptError(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsScriptError",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsScriptError",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsScriptError",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsScriptError(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRunString(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("RunString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("RunString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)elfRunString((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRunScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RunScript",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RunScript",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RunScript",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfRunScript(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetAudioVolume",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetAudioVolume",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetAudioVolume(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetAudioVolume(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetAudioVolume",0,0)
  result = (float)elfGetAudioVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetAudioRolloff(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("SetAudioRolloff",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SetAudioRolloff",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  elfSetAudioRolloff(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetAudioRolloff(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("GetAudioRolloff",0,0)
  result = (float)elfGetAudioRolloff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoadSound(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("LoadSound",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LoadSound",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfLoadSound((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoadStreamedSound(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("LoadStreamedSound",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LoadStreamedSound",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfLoadStreamedSound((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSoundFileType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetSoundFileType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSoundFileType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSoundFileType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetSoundFileType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPlaySound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("PlaySound",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PlaySound",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PlaySound",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlaySound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfPlaySound(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPlayEntitySound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("PlayEntitySound",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PlayEntitySound",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("PlayEntitySound",2,"handle");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("PlayEntitySound",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlayEntitySound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PlayEntitySound",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = elfPlayEntitySound(arg1,arg2,arg3);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoopSound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("LoopSound",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LoopSound",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LoopSound",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopSound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = elfLoopSound(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfLoopEntitySound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  elf_handle result;
  
  SWIG_check_num_args("LoopEntitySound",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("LoopEntitySound",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LoopEntitySound",2,"handle");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LoopEntitySound",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopEntitySound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("LoopEntitySound",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = elfLoopEntitySound(arg1,arg2,arg3);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSoundVolume(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSoundVolume",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSoundVolume",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSoundVolume",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSoundVolume",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetSoundVolume(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSoundVolume(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetSoundVolume",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSoundVolume",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSoundVolume",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetSoundVolume(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfPauseSound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("PauseSound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PauseSound",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("PauseSound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfPauseSound(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfResumeSound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ResumeSound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ResumeSound",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ResumeSound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfResumeSound(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfStopSound(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("StopSound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("StopSound",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("StopSound",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfStopSound(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsSoundPlaying(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsSoundPlaying",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsSoundPlaying",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsSoundPlaying",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsSoundPlaying(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsSoundPaused(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("IsSoundPaused",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("IsSoundPaused",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("IsSoundPaused",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfIsSoundPaused(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCollisionActor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetCollisionActor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCollisionActor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCollisionActor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCollisionActor(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCollisionPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetCollisionPosition",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCollisionPosition",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCollisionPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCollisionPosition(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCollisionNormal(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetCollisionNormal",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCollisionNormal",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCollisionNormal",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCollisionNormal(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCollisionDepth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetCollisionDepth",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCollisionDepth",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCollisionDepth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetCollisionDepth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetJointName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetJointName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointType(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetJointType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointType",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointType",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetJointType(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointActorA(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetJointActorA",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointActorA",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointActorA",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetJointActorA(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointActorB(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetJointActorB",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointActorB",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointActorB",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetJointActorB(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointPivot(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetJointPivot",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointPivot",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointPivot",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetJointPivot(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetJointAxis(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec3f result;
  
  SWIG_check_num_args("GetJointAxis",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetJointAxis",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetJointAxis",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetJointAxis(arg1);
  {
    elf_vec3f * resultptr = new elf_vec3f((const elf_vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateFontFromFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateFontFromFile",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateFontFromFile",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CreateFontFromFile",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = elfCreateFontFromFile((char const *)arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFontName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetFontName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFontName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFontName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetFontName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFontFilePath(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetFontFilePath",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFontFilePath",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFontFilePath",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetFontFilePath(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetFontSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetFontSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetFontSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetFontSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetFontSize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetStringWidth(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetStringWidth",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetStringWidth",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetStringWidth",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetStringWidth",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)elfGetStringWidth(arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetStringHeight(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetStringHeight",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetStringHeight",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetStringHeight",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetStringHeight",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)elfGetStringHeight(arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetGuiObjectName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectName",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetGuiObjectName(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetGuiObjectPosition",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectPosition",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiObjectPosition(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetGuiObjectSize",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectSize",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiObjectSize(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetGuiObjectColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiObjectColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetGuiObjectVisible",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectVisible",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetGuiObjectVisible(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetGuiObjectScript",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectScript",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectScript",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiObjectScript(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectEvent(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetGuiObjectEvent",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectEvent",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectEvent",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetGuiObjectEvent(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetGuiObjectPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetGuiObjectPosition",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetGuiObjectPosition",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetGuiObjectPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetGuiObjectPosition",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGuiObjectPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetGuiObjectPosition(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetGuiObjectColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetGuiObjectColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetGuiObjectColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetGuiObjectColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetGuiObjectColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetGuiObjectColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetGuiObjectColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGuiObjectColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetGuiObjectColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetGuiObjectVisible(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetGuiObjectVisible",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetGuiObjectVisible",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetGuiObjectVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGuiObjectVisible",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetGuiObjectVisible(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetGuiObjectScript(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetGuiObjectScript",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetGuiObjectScript",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetGuiObjectScript",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGuiObjectScript",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetGuiObjectScript",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetGuiObjectScript(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateLabel(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateLabel",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateLabel",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateLabel((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLabelFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetLabelFont",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLabelFont",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLabelFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetLabelFont(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetLabelText(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetLabelText",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetLabelText",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetLabelText",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetLabelText(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLabelFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetLabelFont",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLabelFont",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetLabelFont",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLabelFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLabelFont",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetLabelFont(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetLabelText(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetLabelText",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetLabelText",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetLabelText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetLabelText",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfSetLabelText(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateButton(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateButton",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateButton",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateButton((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetButtonState(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetButtonState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetButtonState",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetButtonState",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetButtonState(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetButtonOffTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetButtonOffTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetButtonOffTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetButtonOffTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetButtonOffTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetButtonOverTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetButtonOverTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetButtonOverTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetButtonOverTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetButtonOverTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetButtonOnTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetButtonOnTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetButtonOnTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetButtonOnTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetButtonOnTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetButtonOffTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetButtonOffTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetButtonOffTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetButtonOffTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOffTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOffTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetButtonOffTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetButtonOverTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetButtonOverTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetButtonOverTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetButtonOverTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOverTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOverTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetButtonOverTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetButtonOnTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetButtonOnTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetButtonOnTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetButtonOnTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOnTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetButtonOnTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetButtonOnTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreatePicture(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreatePicture",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreatePicture",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreatePicture((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPictureTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetPictureTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPictureTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPictureTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetPictureTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetPictureScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2f result;
  
  SWIG_check_num_args("GetPictureScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetPictureScale",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetPictureScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetPictureScale(arg1);
  {
    elf_vec2f * resultptr = new elf_vec2f((const elf_vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPictureTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetPictureTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPictureTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetPictureTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPictureTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPictureTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetPictureTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetPictureScale(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetPictureScale",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetPictureScale",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetPictureScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetPictureScale",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetPictureScale",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  elfSetPictureScale(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateTextField(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateTextField",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateTextField",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateTextField((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextFieldTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetTextFieldTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextFieldTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextFieldTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextFieldTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextFieldFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetTextFieldFont",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextFieldFont",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextFieldFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextFieldFont(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextFieldTextColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetTextFieldTextColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextFieldTextColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextFieldTextColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextFieldTextColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextFieldOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_vec2i result;
  
  SWIG_check_num_args("GetTextFieldOffset",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextFieldOffset",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextFieldOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextFieldOffset(arg1);
  {
    elf_vec2i * resultptr = new elf_vec2i((const elf_vec2i &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_vec2i,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextFieldText(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTextFieldText",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextFieldText",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextFieldText",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetTextFieldText(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetTextFieldTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetTextFieldTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetTextFieldTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetTextFieldFont",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldFont",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetTextFieldFont",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldFont",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetTextFieldFont(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldTextColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextFieldTextColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldTextColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextFieldTextColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextFieldTextColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextFieldTextColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetTextFieldTextColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldTextColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetTextFieldTextColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  int arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextFieldOffset",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldOffset",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextFieldOffset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextFieldOffset",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  elfSetTextFieldOffset(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldCursorPosition(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextFieldCursorPosition",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldCursorPosition",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextFieldCursorPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldCursorPosition",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetTextFieldCursorPosition(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextFieldText(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextFieldText",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextFieldText",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SetTextFieldText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextFieldText",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfSetTextFieldText(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateSlider(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateSlider",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateSlider",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateSlider((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSliderBackgroundTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSliderBackgroundTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSliderBackgroundTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSliderBackgroundTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSliderBackgroundTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSliderSliderTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetSliderSliderTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSliderSliderTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSliderSliderTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetSliderSliderTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetSliderValue(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  float result;
  
  SWIG_check_num_args("GetSliderValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetSliderValue",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetSliderValue",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (float)elfGetSliderValue(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSliderBackgroundTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetSliderBackgroundTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSliderBackgroundTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetSliderBackgroundTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSliderBackgroundTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSliderBackgroundTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetSliderBackgroundTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSliderSliderTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetSliderSliderTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSliderSliderTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetSliderSliderTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSliderSliderTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSliderSliderTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetSliderSliderTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetSliderValue(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetSliderValue",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetSliderValue",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetSliderValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetSliderValue",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  elfSetSliderValue(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateScreen(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateScreen",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateScreen",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateScreen((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetScreenTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetScreenTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetScreenTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetScreenTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetScreenTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetScreenTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetScreenTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetScreenTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetScreenTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScreenTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScreenTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetScreenTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetScreenToTop(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetScreenToTop",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetScreenToTop",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetScreenToTop",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfSetScreenToTop(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfForceFocusToScreen(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ForceFocusToScreen",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ForceFocusToScreen",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ForceFocusToScreen",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfForceFocusToScreen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfReleaseFocusFromScreen(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("ReleaseFocusFromScreen",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ReleaseFocusFromScreen",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("ReleaseFocusFromScreen",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfReleaseFocusFromScreen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateTextList(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateTextList",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateTextList",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateTextList((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetTextListFont",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListFont",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextListFont(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListSelectionColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetTextListSelectionColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListSelectionColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListSelectionColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextListSelectionColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListLightColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetTextListLightColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListLightColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListLightColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextListLightColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListDarkColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_color result;
  
  SWIG_check_num_args("GetTextListDarkColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListDarkColor",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListDarkColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetTextListDarkColor(arg1);
  {
    elf_color * resultptr = new elf_color((const elf_color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListRowCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextListRowCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListRowCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListRowCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextListRowCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListItemCount(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextListItemCount",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListItemCount",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListItemCount",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextListItemCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListSelectionIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextListSelectionIndex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListSelectionIndex",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListSelectionIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextListSelectionIndex(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  int result;
  
  SWIG_check_num_args("GetTextListOffset",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListOffset",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (int)elfGetTextListOffset(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTextListItem",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListItem",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetTextListItem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)elfGetTextListItem(arg1,arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetTextListSelectedItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GetTextListSelectedItem",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetTextListSelectedItem",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetTextListSelectedItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (char *)elfGetTextListSelectedItem(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListFont(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetTextListFont",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListFont",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetTextListFont",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListFont",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListFont",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetTextListFont(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListSelectionColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListSelectionColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListSelectionColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListSelectionColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextListSelectionColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextListSelectionColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetTextListSelectionColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListSelectionColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetTextListSelectionColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListLightColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListLightColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListLightColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListLightColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextListLightColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextListLightColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetTextListLightColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListLightColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetTextListLightColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListDarkColor(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListDarkColor",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListDarkColor",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListDarkColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextListDarkColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SetTextListDarkColor",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SetTextListDarkColor",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListDarkColor",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  elfSetTextListDarkColor(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListSize(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  int arg3 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListSize",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListSize",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListSize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SetTextListSize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListSize",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  elfSetTextListSize(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddTextListItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("AddTextListItem",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddTextListItem",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("AddTextListItem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddTextListItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  elfAddTextListItem(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListItem",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListItem",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListItem",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SetTextListItem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  elfSetTextListItem(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveTextListItem(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveTextListItem",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveTextListItem",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveTextListItem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveTextListItem",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveTextListItem(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveTextListItems(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("RemoveTextListItems",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveTextListItems",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveTextListItems",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfRemoveTextListItems(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListOffset(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListOffset",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListOffset",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListOffset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListOffset",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetTextListOffset(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetTextListSelection(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetTextListSelection",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetTextListSelection",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SetTextListSelection",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetTextListSelection",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  elfSetTextListSelection(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateCheckBox(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  elf_handle result;
  
  SWIG_check_num_args("CreateCheckBox",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateCheckBox",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = elfCreateCheckBox((char const *)arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCheckBoxState(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("GetCheckBoxState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCheckBoxState",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCheckBoxState",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = (bool)elfGetCheckBoxState(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCheckBoxOffTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetCheckBoxOffTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCheckBoxOffTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCheckBoxOffTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCheckBoxOffTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCheckBoxOnTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetCheckBoxOnTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetCheckBoxOnTexture",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetCheckBoxOnTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetCheckBoxOnTexture(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCheckBoxOffTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetCheckBoxOffTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCheckBoxOffTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetCheckBoxOffTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCheckBoxOffTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCheckBoxOffTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetCheckBoxOffTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCheckBoxOnTexture(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  
  SWIG_check_num_args("SetCheckBoxOnTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCheckBoxOnTexture",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SetCheckBoxOnTexture",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCheckBoxOnTexture",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCheckBoxOnTexture",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  elfSetCheckBoxOnTexture(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSetCheckBoxState(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  bool arg2 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("SetCheckBoxState",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SetCheckBoxState",1,"handle");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SetCheckBoxState",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("SetCheckBoxState",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  elfSetCheckBoxState(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateGui(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle result;
  
  SWIG_check_num_args("CreateGui",0,0)
  result = elfCreateGui();
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfAddGuiObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("AddGuiObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AddGuiObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AddGuiObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddGuiObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("AddGuiObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfAddGuiObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetGuiObjectByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GetGuiObjectByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = elfGetGuiObjectByName(arg1,(char const *)arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiObjectByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetGuiObjectByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiObjectByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GetGuiObjectByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiObjectByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = elfGetGuiObjectByIndex(arg1,arg2);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveGuiObjectByName(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  char *arg2 = (char *) 0 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveGuiObjectByName",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveGuiObjectByName",1,"handle");
  if(!lua_isstring(L,2)) SWIG_fail_arg("RemoveGuiObjectByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveGuiObjectByName",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)elfRemoveGuiObjectByName(arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveGuiObjectByIndex(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  int arg2 ;
  elf_handle *argp1 ;
  bool result;
  
  SWIG_check_num_args("RemoveGuiObjectByIndex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveGuiObjectByIndex",1,"handle");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RemoveGuiObjectByIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveGuiObjectByIndex",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)elfRemoveGuiObjectByIndex(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfRemoveGuiObjectByObject(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle arg2 ;
  elf_handle *argp1 ;
  elf_handle *argp2 ;
  bool result;
  
  SWIG_check_num_args("RemoveGuiObjectByObject",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RemoveGuiObjectByObject",1,"handle");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RemoveGuiObjectByObject",2,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveGuiObjectByObject",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("RemoveGuiObjectByObject",2,SWIGTYPE_p_elf_handle);
  }
  arg2 = *argp2;
  
  result = (bool)elfRemoveGuiObjectByObject(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiTrace(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetGuiTrace",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiTrace",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiTrace",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiTrace(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetGuiFocus(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  elf_handle result;
  
  SWIG_check_num_args("GetGuiFocus",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GetGuiFocus",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("GetGuiFocus",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  result = elfGetGuiFocus(arg1);
  {
    elf_handle * resultptr = new elf_handle((const elf_handle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_elf_handle,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfEmptyGui(lua_State* L) {
  int SWIG_arg = 0;
  elf_handle arg1 ;
  elf_handle *argp1 ;
  
  SWIG_check_num_args("EmptyGui",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("EmptyGui",1,"handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_elf_handle,0))){
    SWIG_fail_ptr("EmptyGui",1,SWIGTYPE_p_elf_handle);
  }
  arg1 = *argp1;
  
  elfEmptyGui(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfCreateSession(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned short arg2 ;
  bool result;
  
  SWIG_check_num_args("CreateSession",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("CreateSession",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CreateSession",2,"unsigned short");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (bool)elfCreateSession((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfConnectSession(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned short arg2 ;
  bool result;
  
  SWIG_check_num_args("ConnectSession",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ConnectSession",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConnectSession",2,"unsigned short");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (bool)elfConnectSession((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfDisconnectSession(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("DisconnectSession",0,0)
  result = (bool)elfDisconnectSession();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSendStringToClients(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SendStringToClients",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SendStringToClients",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  elfSendStringToClients((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfSendStringToServer(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SendStringToServer",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("SendStringToServer",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  elfSendStringToServer((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetServerDataAsString(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetServerDataAsString",0,0)
  result = (char *)elfGetServerDataAsString();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetClientDataAsString(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GetClientDataAsString",0,0)
  result = (char *)elfGetClientDataAsString();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetServerEvent(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetServerEvent",0,0)
  result = (int)elfGetServerEvent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetClientEvent(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetClientEvent",0,0)
  result = (int)elfGetClientEvent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfGetCurrentClient(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("GetCurrentClient",0,0)
  result = (int)elfGetCurrentClient();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsServer(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsServer",0,0)
  result = (bool)elfIsServer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_elfIsClient(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("IsClient",0,0)
  result = (bool)elfIsClient();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "IsObject", _wrap_elfIsObject},
    { "GetObjectType", _wrap_elfGetObjectType},
    { "GetObjectRefCount", _wrap_elfGetObjectRefCount},
    { "GetGlobalRefCount", _wrap_elfGetGlobalRefCount},
    { "GetGlobalObjCount", _wrap_elfGetGlobalObjCount},
    { "IsActor", _wrap_elfIsActor},
    { "IsGuiObject", _wrap_elfIsGuiObject},
    { "CreateList", _wrap_elfCreateList},
    { "GetListLength", _wrap_elfGetListLength},
    { "InsertToList", _wrap_elfInsertToList},
    { "AppendToList", _wrap_elfAppendToList},
    { "RemoveFromList", _wrap_elfRemoveFromList},
    { "GetItemFromList", _wrap_elfGetItemFromList},
    { "BeginList", _wrap_elfBeginList},
    { "NextInList", _wrap_elfNextInList},
    { "RbeginList", _wrap_elfRbeginList},
    { "RnextInList", _wrap_elfRnextInList},
    { "SeekList", _wrap_elfSeekList},
    { "RseekList", _wrap_elfRseekList},
    { "ReadConfig", _wrap_elfReadConfig},
    { "GetConfigWindowWidth", _wrap_elfGetConfigWindowWidth},
    { "GetConfigWindowHeight", _wrap_elfGetConfigWindowHeight},
    { "GetConfigFullscreen", _wrap_elfGetConfigFullscreen},
    { "GetConfigTextureAnisotropy", _wrap_elfGetConfigTextureAnisotropy},
    { "GetConfigShadowMapSize", _wrap_elfGetConfigShadowMapSize},
    { "GetConfigStart", _wrap_elfGetConfigStart},
    { "GetConfigLog", _wrap_elfGetConfigLog},
    { "SetTitle", _wrap_elfSetTitle},
    { "GetWindowWidth", _wrap_elfGetWindowWidth},
    { "GetWindowHeight", _wrap_elfGetWindowHeight},
    { "GetVideoModeCount", _wrap_elfGetVideoModeCount},
    { "GetVideoMode", _wrap_elfGetVideoMode},
    { "IsFullscreen", _wrap_elfIsFullscreen},
    { "GetTitle", _wrap_elfGetTitle},
    { "GetMultisamples", _wrap_elfGetMultisamples},
    { "GetTime", _wrap_elfGetTime},
    { "IsWindowOpened", _wrap_elfIsWindowOpened},
    { "GetMousePosition", _wrap_elfGetMousePosition},
    { "GetMouseForce", _wrap_elfGetMouseForce},
    { "SetMousePosition", _wrap_elfSetMousePosition},
    { "HideMouse", _wrap_elfHideMouse},
    { "IsMouseHidden", _wrap_elfIsMouseHidden},
    { "GetMouseWheel", _wrap_elfGetMouseWheel},
    { "GetMouseButtonState", _wrap_elfGetMouseButtonState},
    { "GetKeyState", _wrap_elfGetKeyState},
    { "GetJoystickPresent", _wrap_elfGetJoystickPresent},
    { "GetJoystickAxis", _wrap_elfGetJoystickAxis},
    { "GetJoystickButtonState", _wrap_elfGetJoystickButtonState},
    { "GetEventCount", _wrap_elfGetEventCount},
    { "GetEvent", _wrap_elfGetEvent},
    { "Init", _wrap_elfInit},
    { "InitWithConfig", _wrap_elfInitWithConfig},
    { "Deinit", _wrap_elfDeinit},
    { "ResizeWindow", _wrap_elfResizeWindow},
    { "GetPlatform", _wrap_elfGetPlatform},
    { "GetVersionMajor", _wrap_elfGetVersionMajor},
    { "GetVersionMinor", _wrap_elfGetVersionMinor},
    { "GetVersionRelease", _wrap_elfGetVersionRelease},
    { "GetVersion", _wrap_elfGetVersion},
    { "GetCurrentDirectory", _wrap_elfGetCurrentDirectory},
    { "GetErrorString", _wrap_elfGetErrorString},
    { "GetError", _wrap_elfGetError},
    { "Run", _wrap_elfRun},
    { "Quit", _wrap_elfQuit},
    { "SetF10Exit", _wrap_elfSetF10Exit},
    { "GetF10Exit", _wrap_elfGetF10Exit},
    { "LoadScene", _wrap_elfLoadScene},
    { "SetScene", _wrap_elfSetScene},
    { "GetScene", _wrap_elfGetScene},
    { "SetGui", _wrap_elfSetGui},
    { "GetGui", _wrap_elfGetGui},
    { "GetSync", _wrap_elfGetSync},
    { "GetFps", _wrap_elfGetFps},
    { "SaveScreenShot", _wrap_elfSaveScreenShot},
    { "SetFpsLimit", _wrap_elfSetFpsLimit},
    { "GetFpsLimit", _wrap_elfGetFpsLimit},
    { "SetTickRate", _wrap_elfSetTickRate},
    { "GetTickRate", _wrap_elfGetTickRate},
    { "SetSpeed", _wrap_elfSetSpeed},
    { "GetSpeed", _wrap_elfGetSpeed},
    { "SetTextureAnisotropy", _wrap_elfSetTextureAnisotropy},
    { "GetTextureAnisotropy", _wrap_elfGetTextureAnisotropy},
    { "SetShadowMapSize", _wrap_elfSetShadowMapSize},
    { "GetShadowMapSize", _wrap_elfGetShadowMapSize},
    { "GetPolygonsRendered", _wrap_elfGetPolygonsRendered},
    { "SetBloom", _wrap_elfSetBloom},
    { "DisableBloom", _wrap_elfDisableBloom},
    { "GetBloomThreshold", _wrap_elfGetBloomThreshold},
    { "SetDof", _wrap_elfSetDof},
    { "DisableDof", _wrap_elfDisableDof},
    { "GetDofFocalRange", _wrap_elfGetDofFocalRange},
    { "GetDofFocalDistance", _wrap_elfGetDofFocalDistance},
    { "SetSsao", _wrap_elfSetSsao},
    { "DisableSsao", _wrap_elfDisableSsao},
    { "GetSsaoAmount", _wrap_elfGetSsaoAmount},
    { "SetLightShafts", _wrap_elfSetLightShafts},
    { "DisableLightShafts", _wrap_elfDisableLightShafts},
    { "GetLightShaftsInteisity", _wrap_elfGetLightShaftsInteisity},
    { "IsBloom", _wrap_elfIsBloom},
    { "IsSsao", _wrap_elfIsSsao},
    { "IsDof", _wrap_elfIsDof},
    { "IsLightShafts", _wrap_elfIsLightShafts},
    { "SetOcclusionCulling", _wrap_elfSetOcclusionCulling},
    { "IsOcclusionCulling", _wrap_elfIsOcclusionCulling},
    { "SetDebugDraw", _wrap_elfSetDebugDraw},
    { "IsDebugDraw", _wrap_elfIsDebugDraw},
    { "GetActor", _wrap_elfGetActor},
    { "ReadDirectory", _wrap_elfReadDirectory},
    { "GetDirectoryPath", _wrap_elfGetDirectoryPath},
    { "GetDirectoryItemCount", _wrap_elfGetDirectoryItemCount},
    { "GetDirectoryItem", _wrap_elfGetDirectoryItem},
    { "GetDirectoryItemName", _wrap_elfGetDirectoryItemName},
    { "GetDirectoryItemType", _wrap_elfGetDirectoryItemType},
    { "CreateVec3f", _wrap_elfCreateVec3f},
    { "CreateVec3fFromValues", _wrap_elfCreateVec3fFromValues},
    { "CreateQua", _wrap_elfCreateQua},
    { "CreateQuaFromEuler", _wrap_elfCreateQuaFromEuler},
    { "MulQuaVec3f", _wrap_elfMulQuaVec3f},
    { "MulQuaQua", _wrap_elfMulQuaQua},
    { "GetQuaInverted", _wrap_elfGetQuaInverted},
    { "SubVec3fVec3f", _wrap_elfSubVec3fVec3f},
    { "AddVec3fVec3f", _wrap_elfAddVec3fVec3f},
    { "GetVec3fLength", _wrap_elfGetVec3fLength},
    { "AboutZero", _wrap_elfAboutZero},
    { "FloatAbs", _wrap_elfFloatAbs},
    { "FloatMin", _wrap_elfFloatMin},
    { "FloatMax", _wrap_elfFloatMax},
    { "RandomFloat", _wrap_elfRandomFloat},
    { "RandomFloatRange", _wrap_elfRandomFloatRange},
    { "RandomInt", _wrap_elfRandomInt},
    { "RandomIntRange", _wrap_elfRandomIntRange},
    { "CreateFramePlayer", _wrap_elfCreateFramePlayer},
    { "UpdateFramePlayer", _wrap_elfUpdateFramePlayer},
    { "SetFramePlayerFrame", _wrap_elfSetFramePlayerFrame},
    { "PlayFramePlayer", _wrap_elfPlayFramePlayer},
    { "LoopFramePlayer", _wrap_elfLoopFramePlayer},
    { "StopFramePlayer", _wrap_elfStopFramePlayer},
    { "PauseFramePlayer", _wrap_elfPauseFramePlayer},
    { "ResumeFramePlayer", _wrap_elfResumeFramePlayer},
    { "GetFramePlayerStart", _wrap_elfGetFramePlayerStart},
    { "GetFramePlayerEnd", _wrap_elfGetFramePlayerEnd},
    { "GetFramePlayerSpeed", _wrap_elfGetFramePlayerSpeed},
    { "GetFramePlayerFrame", _wrap_elfGetFramePlayerFrame},
    { "IsFramePlayerPlaying", _wrap_elfIsFramePlayerPlaying},
    { "IsFramePlayerPaused", _wrap_elfIsFramePlayerPaused},
    { "CreateTimer", _wrap_elfCreateTimer},
    { "StartTimer", _wrap_elfStartTimer},
    { "GetElapsedTime", _wrap_elfGetElapsedTime},
    { "CreateTextureFromFile", _wrap_elfCreateTextureFromFile},
    { "GetTextureName", _wrap_elfGetTextureName},
    { "GetTextureFilePath", _wrap_elfGetTextureFilePath},
    { "GetTextureWidth", _wrap_elfGetTextureWidth},
    { "GetTextureHeight", _wrap_elfGetTextureHeight},
    { "GetTextureFormat", _wrap_elfGetTextureFormat},
    { "GetTextureDataFormat", _wrap_elfGetTextureDataFormat},
    { "CreateMaterial", _wrap_elfCreateMaterial},
    { "SetMaterialDiffuseColor", _wrap_elfSetMaterialDiffuseColor},
    { "SetMaterialSpecularColor", _wrap_elfSetMaterialSpecularColor},
    { "SetMaterialAmbientColor", _wrap_elfSetMaterialAmbientColor},
    { "SetMaterialSpecularPower", _wrap_elfSetMaterialSpecularPower},
    { "SetMaterialLighting", _wrap_elfSetMaterialLighting},
    { "GetMaterialName", _wrap_elfGetMaterialName},
    { "GetMaterialFilePath", _wrap_elfGetMaterialFilePath},
    { "GetMaterialDiffuseColor", _wrap_elfGetMaterialDiffuseColor},
    { "GetMaterialSpecularColor", _wrap_elfGetMaterialSpecularColor},
    { "GetMaterialAmbientColor", _wrap_elfGetMaterialAmbientColor},
    { "GetMaterialSpecularPower", _wrap_elfGetMaterialSpecularPower},
    { "GetMaterialLighting", _wrap_elfGetMaterialLighting},
    { "SetMaterialDiffuseMap", _wrap_elfSetMaterialDiffuseMap},
    { "SetMaterialNormalMap", _wrap_elfSetMaterialNormalMap},
    { "SetMaterialHeightMap", _wrap_elfSetMaterialHeightMap},
    { "SetMaterialSpecularMap", _wrap_elfSetMaterialSpecularMap},
    { "SetMaterialLightMap", _wrap_elfSetMaterialLightMap},
    { "GetMaterialDiffuseMap", _wrap_elfGetMaterialDiffuseMap},
    { "GetMaterialNormalMap", _wrap_elfGetMaterialNormalMap},
    { "GetMaterialHeightMap", _wrap_elfGetMaterialHeightMap},
    { "GetMaterialSpecularMap", _wrap_elfGetMaterialSpecularMap},
    { "GetMaterialLightMap", _wrap_elfGetMaterialLightMap},
    { "SetMaterialParallaxScale", _wrap_elfSetMaterialParallaxScale},
    { "SetMaterialAlphaTest", _wrap_elfSetMaterialAlphaTest},
    { "SetMaterialAlphaThreshold", _wrap_elfSetMaterialAlphaThreshold},
    { "GetMaterialParallaxScale", _wrap_elfGetMaterialParallaxScale},
    { "GetMaterialAlphaTest", _wrap_elfGetMaterialAlphaTest},
    { "GetMaterialAlphaThreshold", _wrap_elfGetMaterialAlphaThreshold},
    { "AddPointToBezierCurve", _wrap_elfAddPointToBezierCurve},
    { "AddCurveToIpo", _wrap_elfAddCurveToIpo},
    { "GetIpoLoc", _wrap_elfGetIpoLoc},
    { "GetIpoRot", _wrap_elfGetIpoRot},
    { "GetIpoScale", _wrap_elfGetIpoScale},
    { "GetIpoQua", _wrap_elfGetIpoQua},
    { "CreateProperty", _wrap_elfCreateProperty},
    { "GetPropertyType", _wrap_elfGetPropertyType},
    { "GetPropertyInt", _wrap_elfGetPropertyInt},
    { "GetPropertyFloat", _wrap_elfGetPropertyFloat},
    { "GetPropertyString", _wrap_elfGetPropertyString},
    { "GetPropertyBool", _wrap_elfGetPropertyBool},
    { "SetPropertyInt", _wrap_elfSetPropertyInt},
    { "SetPropertyFloat", _wrap_elfSetPropertyFloat},
    { "SetPropertyString", _wrap_elfSetPropertyString},
    { "SetPropertyBool", _wrap_elfSetPropertyBool},
    { "GetActorName", _wrap_elfGetActorName},
    { "GetActorFilePath", _wrap_elfGetActorFilePath},
    { "GetActorScript", _wrap_elfGetActorScript},
    { "SetActorName", _wrap_elfSetActorName},
    { "SetActorScript", _wrap_elfSetActorScript},
    { "SetActorPosition", _wrap_elfSetActorPosition},
    { "SetActorRotation", _wrap_elfSetActorRotation},
    { "SetActorOrientation", _wrap_elfSetActorOrientation},
    { "RotateActor", _wrap_elfRotateActor},
    { "RotateActorLocal", _wrap_elfRotateActorLocal},
    { "MoveActor", _wrap_elfMoveActor},
    { "MoveActorLocal", _wrap_elfMoveActorLocal},
    { "SetActorPositionRelativeTo", _wrap_elfSetActorPositionRelativeTo},
    { "SetActorRotationRelativeTo", _wrap_elfSetActorRotationRelativeTo},
    { "SetActorOrientationRelativeTo", _wrap_elfSetActorOrientationRelativeTo},
    { "GetActorPosition", _wrap_elfGetActorPosition},
    { "GetActorRotation", _wrap_elfGetActorRotation},
    { "GetActorOrientation", _wrap_elfGetActorOrientation},
    { "SetActorBoundingLengths", _wrap_elfSetActorBoundingLengths},
    { "SetActorBoundingOffset", _wrap_elfSetActorBoundingOffset},
    { "SetActorPhysics", _wrap_elfSetActorPhysics},
    { "IsActorPhysics", _wrap_elfIsActorPhysics},
    { "DisableActorPhysics", _wrap_elfDisableActorPhysics},
    { "SetActorDamping", _wrap_elfSetActorDamping},
    { "SetActorSleepThresholds", _wrap_elfSetActorSleepThresholds},
    { "SetActorRestitution", _wrap_elfSetActorRestitution},
    { "SetActorAnisotropicFriction", _wrap_elfSetActorAnisotropicFriction},
    { "SetActorLinearFactor", _wrap_elfSetActorLinearFactor},
    { "SetActorAngularFactor", _wrap_elfSetActorAngularFactor},
    { "AddForceToActor", _wrap_elfAddForceToActor},
    { "AddForceToActorLocal", _wrap_elfAddForceToActorLocal},
    { "AddTorqueToActor", _wrap_elfAddTorqueToActor},
    { "SetActorLinearVelocity", _wrap_elfSetActorLinearVelocity},
    { "SetActorLinearVelocityLocal", _wrap_elfSetActorLinearVelocityLocal},
    { "SetActorAngularVelocity", _wrap_elfSetActorAngularVelocity},
    { "GetActorBoundingLengths", _wrap_elfGetActorBoundingLengths},
    { "GetActorBoundingOffset", _wrap_elfGetActorBoundingOffset},
    { "GetActorShape", _wrap_elfGetActorShape},
    { "GetActorMass", _wrap_elfGetActorMass},
    { "GetActorLinearDamping", _wrap_elfGetActorLinearDamping},
    { "GetActorAngularDamping", _wrap_elfGetActorAngularDamping},
    { "GetActorLinearSleepThreshold", _wrap_elfGetActorLinearSleepThreshold},
    { "GetActorAngularSleepThreshold", _wrap_elfGetActorAngularSleepThreshold},
    { "GetActorRestitution", _wrap_elfGetActorRestitution},
    { "GetActorAnisotropicFriction", _wrap_elfGetActorAnisotropicFriction},
    { "GetActorLinearFactor", _wrap_elfGetActorLinearFactor},
    { "GetActorAngularFactor", _wrap_elfGetActorAngularFactor},
    { "GetActorLinearVelocity", _wrap_elfGetActorLinearVelocity},
    { "GetActorAngularVelocity", _wrap_elfGetActorAngularVelocity},
    { "AddHingeJointToActor", _wrap_elfAddHingeJointToActor},
    { "AddBallJointToActor", _wrap_elfAddBallJointToActor},
    { "AddConeTwistJointToActor", _wrap_elfAddConeTwistJointToActor},
    { "GetActorJointByName", _wrap_elfGetActorJointByName},
    { "GetActorJointByIndex", _wrap_elfGetActorJointByIndex},
    { "RemoveActorJointByName", _wrap_elfRemoveActorJointByName},
    { "RemoveActorJointByIndex", _wrap_elfRemoveActorJointByIndex},
    { "RemoveActorJointByObject", _wrap_elfRemoveActorJointByObject},
    { "SetActorIpoFrame", _wrap_elfSetActorIpoFrame},
    { "PlayActorIpo", _wrap_elfPlayActorIpo},
    { "LoopActorIpo", _wrap_elfLoopActorIpo},
    { "StopActorIpo", _wrap_elfStopActorIpo},
    { "PauseActorIpo", _wrap_elfPauseActorIpo},
    { "ResumeActorIpo", _wrap_elfResumeActorIpo},
    { "GetActorIpoStart", _wrap_elfGetActorIpoStart},
    { "GetActorIpoEnd", _wrap_elfGetActorIpoEnd},
    { "GetActorIpoSpeed", _wrap_elfGetActorIpoSpeed},
    { "GetActorIpoFrame", _wrap_elfGetActorIpoFrame},
    { "IsActorIpoPlaying", _wrap_elfIsActorIpoPlaying},
    { "IsActorIpoPaused", _wrap_elfIsActorIpoPaused},
    { "GetActorCollisionCount", _wrap_elfGetActorCollisionCount},
    { "GetActorCollision", _wrap_elfGetActorCollision},
    { "GetActorPropertyCount", _wrap_elfGetActorPropertyCount},
    { "AddPropertyToActor", _wrap_elfAddPropertyToActor},
    { "GetActorPropertyByName", _wrap_elfGetActorPropertyByName},
    { "GetActorPropertyByIndex", _wrap_elfGetActorPropertyByIndex},
    { "RemoveActorPropertyByName", _wrap_elfRemoveActorPropertyByName},
    { "RemoveActorPropertyByIndex", _wrap_elfRemoveActorPropertyByIndex},
    { "RemoveActorPropertyByObject", _wrap_elfRemoveActorPropertyByObject},
    { "RemoveActorProperties", _wrap_elfRemoveActorProperties},
    { "SetActorSelected", _wrap_elfSetActorSelected},
    { "GetActorSelected", _wrap_elfGetActorSelected},
    { "CreateCamera", _wrap_elfCreateCamera},
    { "SetCameraViewport", _wrap_elfSetCameraViewport},
    { "SetCameraPerspective", _wrap_elfSetCameraPerspective},
    { "SetCameraOrthographic", _wrap_elfSetCameraOrthographic},
    { "GetCameraViewportSize", _wrap_elfGetCameraViewportSize},
    { "GetCameraViewportOffset", _wrap_elfGetCameraViewportOffset},
    { "GetCameraFov", _wrap_elfGetCameraFov},
    { "GetCameraAspect", _wrap_elfGetCameraAspect},
    { "GetCameraClip", _wrap_elfGetCameraClip},
    { "GetCameraFarPlaneSize", _wrap_elfGetCameraFarPlaneSize},
    { "UnProjectCameraPoint", _wrap_elfUnProjectCameraPoint},
    { "GetModelName", _wrap_elfGetModelName},
    { "GetModelFilePath", _wrap_elfGetModelFilePath},
    { "GetModelVerticeCount", _wrap_elfGetModelVerticeCount},
    { "GetModelIndiceCount", _wrap_elfGetModelIndiceCount},
    { "GetModelBoundingBoxMin", _wrap_elfGetModelBoundingBoxMin},
    { "GetModelBoundingBoxMax", _wrap_elfGetModelBoundingBoxMax},
    { "CreateEntity", _wrap_elfCreateEntity},
    { "SetEntityScale", _wrap_elfSetEntityScale},
    { "GetEntityScale", _wrap_elfGetEntityScale},
    { "SetEntityModel", _wrap_elfSetEntityModel},
    { "GetEntityModel", _wrap_elfGetEntityModel},
    { "GetEntityMaterialCount", _wrap_elfGetEntityMaterialCount},
    { "AddEntityMaterial", _wrap_elfAddEntityMaterial},
    { "SetEntityMaterial", _wrap_elfSetEntityMaterial},
    { "GetEntityMaterial", _wrap_elfGetEntityMaterial},
    { "SetEntityVisible", _wrap_elfSetEntityVisible},
    { "GetEntityVisible", _wrap_elfGetEntityVisible},
    { "SetEntityPhysics", _wrap_elfSetEntityPhysics},
    { "DisableEntityPhysics", _wrap_elfDisableEntityPhysics},
    { "SetEntityArmature", _wrap_elfSetEntityArmature},
    { "SetEntityArmatureFrame", _wrap_elfSetEntityArmatureFrame},
    { "PlayEntityArmature", _wrap_elfPlayEntityArmature},
    { "LoopEntityArmature", _wrap_elfLoopEntityArmature},
    { "StopEntityArmature", _wrap_elfStopEntityArmature},
    { "PauseEntityArmature", _wrap_elfPauseEntityArmature},
    { "ResumeEntityArmature", _wrap_elfResumeEntityArmature},
    { "GetEntityArmatureStart", _wrap_elfGetEntityArmatureStart},
    { "GetEntityArmatureEnd", _wrap_elfGetEntityArmatureEnd},
    { "GetEntityArmatureSpeed", _wrap_elfGetEntityArmatureSpeed},
    { "GetEntityArmatureFrame", _wrap_elfGetEntityArmatureFrame},
    { "IsEntityArmaturePlaying", _wrap_elfIsEntityArmaturePlaying},
    { "IsEntityArmaturePaused", _wrap_elfIsEntityArmaturePaused},
    { "GetEntityArmature", _wrap_elfGetEntityArmature},
    { "GetEntityChanged", _wrap_elfGetEntityChanged},
    { "CreateLight", _wrap_elfCreateLight},
    { "GetLightType", _wrap_elfGetLightType},
    { "GetLightColor", _wrap_elfGetLightColor},
    { "GetLightDistance", _wrap_elfGetLightDistance},
    { "GetLightFadeSpeed", _wrap_elfGetLightFadeSpeed},
    { "GetLightShadowCaster", _wrap_elfGetLightShadowCaster},
    { "GetLightVisible", _wrap_elfGetLightVisible},
    { "GetLightCone", _wrap_elfGetLightCone},
    { "IsLightShaft", _wrap_elfIsLightShaft},
    { "GetLightShaftSize", _wrap_elfGetLightShaftSize},
    { "GetLightShaftIntensity", _wrap_elfGetLightShaftIntensity},
    { "GetLightShaftFadeOff", _wrap_elfGetLightShaftFadeOff},
    { "SetLightType", _wrap_elfSetLightType},
    { "SetLightColor", _wrap_elfSetLightColor},
    { "SetLightDistance", _wrap_elfSetLightDistance},
    { "SetLightFadeSpeed", _wrap_elfSetLightFadeSpeed},
    { "SetLightShadowCaster", _wrap_elfSetLightShadowCaster},
    { "SetLightVisible", _wrap_elfSetLightVisible},
    { "SetLightCone", _wrap_elfSetLightCone},
    { "SetLightShaft", _wrap_elfSetLightShaft},
    { "DisableLightShaft", _wrap_elfDisableLightShaft},
    { "GetBoneArmature", _wrap_elfGetBoneArmature},
    { "GetBoneParent", _wrap_elfGetBoneParent},
    { "GetBoneChildByName", _wrap_elfGetBoneChildByName},
    { "GetBoneChildById", _wrap_elfGetBoneChildById},
    { "GetBoneChildByIndex", _wrap_elfGetBoneChildByIndex},
    { "GetBonePosition", _wrap_elfGetBonePosition},
    { "GetBoneRotation", _wrap_elfGetBoneRotation},
    { "GetBoneOrientation", _wrap_elfGetBoneOrientation},
    { "CreateArmature", _wrap_elfCreateArmature},
    { "GetBoneFromArmatureByName", _wrap_elfGetBoneFromArmatureByName},
    { "GetBoneFromArmatureById", _wrap_elfGetBoneFromArmatureById},
    { "CreateParticles", _wrap_elfCreateParticles},
    { "GetParticlesName", _wrap_elfGetParticlesName},
    { "GetParticlesFilePath", _wrap_elfGetParticlesFilePath},
    { "SetParticlesMaxCount", _wrap_elfSetParticlesMaxCount},
    { "SetParticlesDrawMode", _wrap_elfSetParticlesDrawMode},
    { "SetParticlesTexture", _wrap_elfSetParticlesTexture},
    { "SetParticlesModel", _wrap_elfSetParticlesModel},
    { "SetParticlesEntity", _wrap_elfSetParticlesEntity},
    { "SetParticlesGravity", _wrap_elfSetParticlesGravity},
    { "SetParticlesSpawnDelay", _wrap_elfSetParticlesSpawnDelay},
    { "SetParticlesSpawn", _wrap_elfSetParticlesSpawn},
    { "SetParticlesSize", _wrap_elfSetParticlesSize},
    { "SetParticlesSizeGrowth", _wrap_elfSetParticlesSizeGrowth},
    { "SetParticlesRotation", _wrap_elfSetParticlesRotation},
    { "SetParticlesRotationGrowth", _wrap_elfSetParticlesRotationGrowth},
    { "SetParticlesLifeSpan", _wrap_elfSetParticlesLifeSpan},
    { "SetParticlesFadeSpeed", _wrap_elfSetParticlesFadeSpeed},
    { "SetParticlesPositionMin", _wrap_elfSetParticlesPositionMin},
    { "SetParticlesPositionMax", _wrap_elfSetParticlesPositionMax},
    { "SetParticlesVelocityMin", _wrap_elfSetParticlesVelocityMin},
    { "SetParticlesVelocityMax", _wrap_elfSetParticlesVelocityMax},
    { "SetParticlesColorMin", _wrap_elfSetParticlesColorMin},
    { "SetParticlesColorMax", _wrap_elfSetParticlesColorMax},
    { "GetParticlesMaxCount", _wrap_elfGetParticlesMaxCount},
    { "GetParticlesCount", _wrap_elfGetParticlesCount},
    { "GetParticlesDrawMode", _wrap_elfGetParticlesDrawMode},
    { "GetParticlesTexture", _wrap_elfGetParticlesTexture},
    { "GetParticlesModel", _wrap_elfGetParticlesModel},
    { "GetParticlesEntity", _wrap_elfGetParticlesEntity},
    { "GetParticlesGravity", _wrap_elfGetParticlesGravity},
    { "GetParticlesSpawnDelay", _wrap_elfGetParticlesSpawnDelay},
    { "GetParticlesSpawn", _wrap_elfGetParticlesSpawn},
    { "GetParticlesSizeMin", _wrap_elfGetParticlesSizeMin},
    { "GetParticlesSizeMax", _wrap_elfGetParticlesSizeMax},
    { "GetParticlesSizeGrowthMin", _wrap_elfGetParticlesSizeGrowthMin},
    { "GetParticlesSizeGrowthMax", _wrap_elfGetParticlesSizeGrowthMax},
    { "GetParticlesRotationMin", _wrap_elfGetParticlesRotationMin},
    { "GetParticlesRotationMax", _wrap_elfGetParticlesRotationMax},
    { "GetParticlesRotationGrowthMin", _wrap_elfGetParticlesRotationGrowthMin},
    { "GetParticlesRotationGrowthMax", _wrap_elfGetParticlesRotationGrowthMax},
    { "GetParticlesLifeSpanMin", _wrap_elfGetParticlesLifeSpanMin},
    { "GetParticlesLifeSpanMax", _wrap_elfGetParticlesLifeSpanMax},
    { "GetParticlesFadeSpeedMin", _wrap_elfGetParticlesFadeSpeedMin},
    { "GetParticlesFadeSpeedMax", _wrap_elfGetParticlesFadeSpeedMax},
    { "GetParticlesPositionMin", _wrap_elfGetParticlesPositionMin},
    { "GetParticlesPositionMax", _wrap_elfGetParticlesPositionMax},
    { "GetParticlesVelocityMin", _wrap_elfGetParticlesVelocityMin},
    { "GetParticlesVelocityMax", _wrap_elfGetParticlesVelocityMax},
    { "GetParticlesColorMin", _wrap_elfGetParticlesColorMin},
    { "GetParticlesColorMax", _wrap_elfGetParticlesColorMax},
    { "CreateSprite", _wrap_elfCreateSprite},
    { "SetSpriteMaterial", _wrap_elfSetSpriteMaterial},
    { "SetSpriteScale", _wrap_elfSetSpriteScale},
    { "SetSpriteFaceCamera", _wrap_elfSetSpriteFaceCamera},
    { "GetSpriteMaterial", _wrap_elfGetSpriteMaterial},
    { "GetSpriteScale", _wrap_elfGetSpriteScale},
    { "GetSpriteFaceCamera", _wrap_elfGetSpriteFaceCamera},
    { "CreateScene", _wrap_elfCreateScene},
    { "CreateSceneFromFile", _wrap_elfCreateSceneFromFile},
    { "SaveScene", _wrap_elfSaveScene},
    { "SetSceneAmbientColor", _wrap_elfSetSceneAmbientColor},
    { "GetSceneAmbientColor", _wrap_elfGetSceneAmbientColor},
    { "SetSceneGravity", _wrap_elfSetSceneGravity},
    { "GetSceneGravity", _wrap_elfGetSceneGravity},
    { "SetScenePhysics", _wrap_elfSetScenePhysics},
    { "GetScenePhysics", _wrap_elfGetScenePhysics},
    { "SetSceneRunScripts", _wrap_elfSetSceneRunScripts},
    { "GetSceneRunScripts", _wrap_elfGetSceneRunScripts},
    { "GetSceneName", _wrap_elfGetSceneName},
    { "GetSceneFilePath", _wrap_elfGetSceneFilePath},
    { "GetSceneCameraCount", _wrap_elfGetSceneCameraCount},
    { "GetSceneEntityCount", _wrap_elfGetSceneEntityCount},
    { "GetSceneLightCount", _wrap_elfGetSceneLightCount},
    { "GetSceneArmatureCount", _wrap_elfGetSceneArmatureCount},
    { "GetSceneParticlesCount", _wrap_elfGetSceneParticlesCount},
    { "GetSceneSpriteCount", _wrap_elfGetSceneSpriteCount},
    { "AddCameraToScene", _wrap_elfAddCameraToScene},
    { "AddEntityToScene", _wrap_elfAddEntityToScene},
    { "AddLightToScene", _wrap_elfAddLightToScene},
    { "AddParticlesToScene", _wrap_elfAddParticlesToScene},
    { "AddSpriteToScene", _wrap_elfAddSpriteToScene},
    { "SetSceneActiveCamera", _wrap_elfSetSceneActiveCamera},
    { "GetSceneActiveCamera", _wrap_elfGetSceneActiveCamera},
    { "GetSceneRayCastResult", _wrap_elfGetSceneRayCastResult},
    { "GetSceneRayCastResults", _wrap_elfGetSceneRayCastResults},
    { "GetDebugSceneRayCastResult", _wrap_elfGetDebugSceneRayCastResult},
    { "GetDebugSceneRayCastResults", _wrap_elfGetDebugSceneRayCastResults},
    { "GetCameraByIndex", _wrap_elfGetCameraByIndex},
    { "GetEntityByIndex", _wrap_elfGetEntityByIndex},
    { "GetLightByIndex", _wrap_elfGetLightByIndex},
    { "GetArmatureByIndex", _wrap_elfGetArmatureByIndex},
    { "GetParticlesByIndex", _wrap_elfGetParticlesByIndex},
    { "GetSpriteByIndex", _wrap_elfGetSpriteByIndex},
    { "GetTextureByName", _wrap_elfGetTextureByName},
    { "GetMaterialByName", _wrap_elfGetMaterialByName},
    { "GetModelByName", _wrap_elfGetModelByName},
    { "GetScriptByName", _wrap_elfGetScriptByName},
    { "GetCameraByName", _wrap_elfGetCameraByName},
    { "GetEntityByName", _wrap_elfGetEntityByName},
    { "GetLightByName", _wrap_elfGetLightByName},
    { "GetArmatureByName", _wrap_elfGetArmatureByName},
    { "GetParticlesByName", _wrap_elfGetParticlesByName},
    { "GetSpriteByName", _wrap_elfGetSpriteByName},
    { "GetActorByName", _wrap_elfGetActorByName},
    { "RemoveCameraByName", _wrap_elfRemoveCameraByName},
    { "RemoveEntityByName", _wrap_elfRemoveEntityByName},
    { "RemoveLightByName", _wrap_elfRemoveLightByName},
    { "RemoveParticlesByName", _wrap_elfRemoveParticlesByName},
    { "RemoveSpriteByName", _wrap_elfRemoveSpriteByName},
    { "RemoveCameraByIndex", _wrap_elfRemoveCameraByIndex},
    { "RemoveEntityByIndex", _wrap_elfRemoveEntityByIndex},
    { "RemoveLightByIndex", _wrap_elfRemoveLightByIndex},
    { "RemoveParticlesByIndex", _wrap_elfRemoveParticlesByIndex},
    { "RemoveSpriteByIndex", _wrap_elfRemoveSpriteByIndex},
    { "RemoveCameraByObject", _wrap_elfRemoveCameraByObject},
    { "RemoveEntityByObject", _wrap_elfRemoveEntityByObject},
    { "RemoveLightByObject", _wrap_elfRemoveLightByObject},
    { "RemoveParticlesByObject", _wrap_elfRemoveParticlesByObject},
    { "RemoveSpriteByObject", _wrap_elfRemoveSpriteByObject},
    { "RemoveActorByObject", _wrap_elfRemoveActorByObject},
    { "CreateScript", _wrap_elfCreateScript},
    { "CreateScriptFromFile", _wrap_elfCreateScriptFromFile},
    { "GetScriptName", _wrap_elfGetScriptName},
    { "GetScriptFilePath", _wrap_elfGetScriptFilePath},
    { "SetScriptText", _wrap_elfSetScriptText},
    { "IsScriptError", _wrap_elfIsScriptError},
    { "RunString", _wrap_elfRunString},
    { "RunScript", _wrap_elfRunScript},
    { "SetAudioVolume", _wrap_elfSetAudioVolume},
    { "GetAudioVolume", _wrap_elfGetAudioVolume},
    { "SetAudioRolloff", _wrap_elfSetAudioRolloff},
    { "GetAudioRolloff", _wrap_elfGetAudioRolloff},
    { "LoadSound", _wrap_elfLoadSound},
    { "LoadStreamedSound", _wrap_elfLoadStreamedSound},
    { "GetSoundFileType", _wrap_elfGetSoundFileType},
    { "PlaySound", _wrap_elfPlaySound},
    { "PlayEntitySound", _wrap_elfPlayEntitySound},
    { "LoopSound", _wrap_elfLoopSound},
    { "LoopEntitySound", _wrap_elfLoopEntitySound},
    { "SetSoundVolume", _wrap_elfSetSoundVolume},
    { "GetSoundVolume", _wrap_elfGetSoundVolume},
    { "PauseSound", _wrap_elfPauseSound},
    { "ResumeSound", _wrap_elfResumeSound},
    { "StopSound", _wrap_elfStopSound},
    { "IsSoundPlaying", _wrap_elfIsSoundPlaying},
    { "IsSoundPaused", _wrap_elfIsSoundPaused},
    { "GetCollisionActor", _wrap_elfGetCollisionActor},
    { "GetCollisionPosition", _wrap_elfGetCollisionPosition},
    { "GetCollisionNormal", _wrap_elfGetCollisionNormal},
    { "GetCollisionDepth", _wrap_elfGetCollisionDepth},
    { "GetJointName", _wrap_elfGetJointName},
    { "GetJointType", _wrap_elfGetJointType},
    { "GetJointActorA", _wrap_elfGetJointActorA},
    { "GetJointActorB", _wrap_elfGetJointActorB},
    { "GetJointPivot", _wrap_elfGetJointPivot},
    { "GetJointAxis", _wrap_elfGetJointAxis},
    { "CreateFontFromFile", _wrap_elfCreateFontFromFile},
    { "GetFontName", _wrap_elfGetFontName},
    { "GetFontFilePath", _wrap_elfGetFontFilePath},
    { "GetFontSize", _wrap_elfGetFontSize},
    { "GetStringWidth", _wrap_elfGetStringWidth},
    { "GetStringHeight", _wrap_elfGetStringHeight},
    { "GetGuiObjectName", _wrap_elfGetGuiObjectName},
    { "GetGuiObjectPosition", _wrap_elfGetGuiObjectPosition},
    { "GetGuiObjectSize", _wrap_elfGetGuiObjectSize},
    { "GetGuiObjectColor", _wrap_elfGetGuiObjectColor},
    { "GetGuiObjectVisible", _wrap_elfGetGuiObjectVisible},
    { "GetGuiObjectScript", _wrap_elfGetGuiObjectScript},
    { "GetGuiObjectEvent", _wrap_elfGetGuiObjectEvent},
    { "SetGuiObjectPosition", _wrap_elfSetGuiObjectPosition},
    { "SetGuiObjectColor", _wrap_elfSetGuiObjectColor},
    { "SetGuiObjectVisible", _wrap_elfSetGuiObjectVisible},
    { "SetGuiObjectScript", _wrap_elfSetGuiObjectScript},
    { "CreateLabel", _wrap_elfCreateLabel},
    { "GetLabelFont", _wrap_elfGetLabelFont},
    { "GetLabelText", _wrap_elfGetLabelText},
    { "SetLabelFont", _wrap_elfSetLabelFont},
    { "SetLabelText", _wrap_elfSetLabelText},
    { "CreateButton", _wrap_elfCreateButton},
    { "GetButtonState", _wrap_elfGetButtonState},
    { "GetButtonOffTexture", _wrap_elfGetButtonOffTexture},
    { "GetButtonOverTexture", _wrap_elfGetButtonOverTexture},
    { "GetButtonOnTexture", _wrap_elfGetButtonOnTexture},
    { "SetButtonOffTexture", _wrap_elfSetButtonOffTexture},
    { "SetButtonOverTexture", _wrap_elfSetButtonOverTexture},
    { "SetButtonOnTexture", _wrap_elfSetButtonOnTexture},
    { "CreatePicture", _wrap_elfCreatePicture},
    { "GetPictureTexture", _wrap_elfGetPictureTexture},
    { "GetPictureScale", _wrap_elfGetPictureScale},
    { "SetPictureTexture", _wrap_elfSetPictureTexture},
    { "SetPictureScale", _wrap_elfSetPictureScale},
    { "CreateTextField", _wrap_elfCreateTextField},
    { "GetTextFieldTexture", _wrap_elfGetTextFieldTexture},
    { "GetTextFieldFont", _wrap_elfGetTextFieldFont},
    { "GetTextFieldTextColor", _wrap_elfGetTextFieldTextColor},
    { "GetTextFieldOffset", _wrap_elfGetTextFieldOffset},
    { "GetTextFieldText", _wrap_elfGetTextFieldText},
    { "SetTextFieldTexture", _wrap_elfSetTextFieldTexture},
    { "SetTextFieldFont", _wrap_elfSetTextFieldFont},
    { "SetTextFieldTextColor", _wrap_elfSetTextFieldTextColor},
    { "SetTextFieldOffset", _wrap_elfSetTextFieldOffset},
    { "SetTextFieldCursorPosition", _wrap_elfSetTextFieldCursorPosition},
    { "SetTextFieldText", _wrap_elfSetTextFieldText},
    { "CreateSlider", _wrap_elfCreateSlider},
    { "GetSliderBackgroundTexture", _wrap_elfGetSliderBackgroundTexture},
    { "GetSliderSliderTexture", _wrap_elfGetSliderSliderTexture},
    { "GetSliderValue", _wrap_elfGetSliderValue},
    { "SetSliderBackgroundTexture", _wrap_elfSetSliderBackgroundTexture},
    { "SetSliderSliderTexture", _wrap_elfSetSliderSliderTexture},
    { "SetSliderValue", _wrap_elfSetSliderValue},
    { "CreateScreen", _wrap_elfCreateScreen},
    { "GetScreenTexture", _wrap_elfGetScreenTexture},
    { "SetScreenTexture", _wrap_elfSetScreenTexture},
    { "SetScreenToTop", _wrap_elfSetScreenToTop},
    { "ForceFocusToScreen", _wrap_elfForceFocusToScreen},
    { "ReleaseFocusFromScreen", _wrap_elfReleaseFocusFromScreen},
    { "CreateTextList", _wrap_elfCreateTextList},
    { "GetTextListFont", _wrap_elfGetTextListFont},
    { "GetTextListSelectionColor", _wrap_elfGetTextListSelectionColor},
    { "GetTextListLightColor", _wrap_elfGetTextListLightColor},
    { "GetTextListDarkColor", _wrap_elfGetTextListDarkColor},
    { "GetTextListRowCount", _wrap_elfGetTextListRowCount},
    { "GetTextListItemCount", _wrap_elfGetTextListItemCount},
    { "GetTextListSelectionIndex", _wrap_elfGetTextListSelectionIndex},
    { "GetTextListOffset", _wrap_elfGetTextListOffset},
    { "GetTextListItem", _wrap_elfGetTextListItem},
    { "GetTextListSelectedItem", _wrap_elfGetTextListSelectedItem},
    { "SetTextListFont", _wrap_elfSetTextListFont},
    { "SetTextListSelectionColor", _wrap_elfSetTextListSelectionColor},
    { "SetTextListLightColor", _wrap_elfSetTextListLightColor},
    { "SetTextListDarkColor", _wrap_elfSetTextListDarkColor},
    { "SetTextListSize", _wrap_elfSetTextListSize},
    { "AddTextListItem", _wrap_elfAddTextListItem},
    { "SetTextListItem", _wrap_elfSetTextListItem},
    { "RemoveTextListItem", _wrap_elfRemoveTextListItem},
    { "RemoveTextListItems", _wrap_elfRemoveTextListItems},
    { "SetTextListOffset", _wrap_elfSetTextListOffset},
    { "SetTextListSelection", _wrap_elfSetTextListSelection},
    { "CreateCheckBox", _wrap_elfCreateCheckBox},
    { "GetCheckBoxState", _wrap_elfGetCheckBoxState},
    { "GetCheckBoxOffTexture", _wrap_elfGetCheckBoxOffTexture},
    { "GetCheckBoxOnTexture", _wrap_elfGetCheckBoxOnTexture},
    { "SetCheckBoxOffTexture", _wrap_elfSetCheckBoxOffTexture},
    { "SetCheckBoxOnTexture", _wrap_elfSetCheckBoxOnTexture},
    { "SetCheckBoxState", _wrap_elfSetCheckBoxState},
    { "CreateGui", _wrap_elfCreateGui},
    { "AddGuiObject", _wrap_elfAddGuiObject},
    { "GetGuiObjectByName", _wrap_elfGetGuiObjectByName},
    { "GetGuiObjectByIndex", _wrap_elfGetGuiObjectByIndex},
    { "RemoveGuiObjectByName", _wrap_elfRemoveGuiObjectByName},
    { "RemoveGuiObjectByIndex", _wrap_elfRemoveGuiObjectByIndex},
    { "RemoveGuiObjectByObject", _wrap_elfRemoveGuiObjectByObject},
    { "GetGuiTrace", _wrap_elfGetGuiTrace},
    { "GetGuiFocus", _wrap_elfGetGuiFocus},
    { "EmptyGui", _wrap_elfEmptyGui},
    { "CreateSession", _wrap_elfCreateSession},
    { "ConnectSession", _wrap_elfConnectSession},
    { "DisconnectSession", _wrap_elfDisconnectSession},
    { "SendStringToClients", _wrap_elfSendStringToClients},
    { "SendStringToServer", _wrap_elfSendStringToServer},
    { "GetServerDataAsString", _wrap_elfGetServerDataAsString},
    { "GetClientDataAsString", _wrap_elfGetClientDataAsString},
    { "GetServerEvent", _wrap_elfGetServerEvent},
    { "GetClientEvent", _wrap_elfGetClientEvent},
    { "GetCurrentClient", _wrap_elfGetCurrentClient},
    { "IsServer", _wrap_elfIsServer},
    { "IsClient", _wrap_elfIsClient},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"FALSE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TRUE", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NONE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_ESC", (long) 135, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F1", (long) 136, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F2", (long) 137, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F3", (long) 138, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F4", (long) 139, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F5", (long) 140, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F6", (long) 141, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F7", (long) 142, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F8", (long) 143, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F9", (long) 144, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F10", (long) 145, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F11", (long) 146, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F12", (long) 147, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_UP", (long) 148, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_DOWN", (long) 149, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LEFT", (long) 150, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RIGHT", (long) 151, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LSHIFT", (long) 152, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RSHIFT", (long) 153, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LCTRL", (long) 154, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RCTRL", (long) 155, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LALT", (long) 156, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RALT", (long) 157, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_TAB", (long) 158, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_ENTER", (long) 159, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_BACKSPACE", (long) 160, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_INSERT", (long) 161, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_DEL", (long) 162, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PAGEUP", (long) 163, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PAGEDOWN", (long) 164, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_HOME", (long) 165, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_END", (long) 166, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_0", (long) 167, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_1", (long) 168, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_2", (long) 169, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_3", (long) 170, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_4", (long) 171, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_5", (long) 172, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_6", (long) 173, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_7", (long) 174, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_8", (long) 175, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_9", (long) 176, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_DIVIDE", (long) 177, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_MULTIPLY", (long) 178, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_SUBTRACT", (long) 179, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_ADD", (long) 180, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_DECIMAL", (long) 181, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_EQUAL", (long) 182, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_ENTER", (long) 183, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SPACE", (long) 32, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_0", (long) 48, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_1", (long) 49, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_2", (long) 50, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_3", (long) 51, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_4", (long) 52, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_5", (long) 53, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_6", (long) 54, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_7", (long) 55, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_8", (long) 56, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_9", (long) 57, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_A", (long) 65, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_B", (long) 66, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_C", (long) 67, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_D", (long) 68, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_E", (long) 69, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F", (long) 70, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_G", (long) 71, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_H", (long) 72, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_I", (long) 73, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_J", (long) 74, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_K", (long) 75, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_L", (long) 76, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_M", (long) 77, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_N", (long) 78, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_O", (long) 79, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_P", (long) 80, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_Q", (long) 81, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_R", (long) 82, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_S", (long) 83, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_T", (long) 84, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_U", (long) 85, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_V", (long) 86, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_W", (long) 87, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_X", (long) 88, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_Y", (long) 89, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_Z", (long) 90, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"UP", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PRESSED", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DOWN", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RELEASED", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OFF", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ON", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OVER", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BUTTON_LEFT", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BUTTON_MIDDLE", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BUTTON_RIGHT", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TEXTURE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MATERIAL", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MODEL", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CAMERA", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ENTITY", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LIGHT", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCENE", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LIST", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PAK", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PAK_INDEX", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_EVENT", (long) 0x000A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_EVENT", (long) 0x000B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONTEXT", (long) 0x000C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ENGINE", (long) 0x000D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TIMER", (long) 0x000E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IMAGE", (long) 0x000F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"POST_PROCESS", (long) 0x0010, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCRIPT", (long) 0x0011, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AUDIO_DEVICE", (long) 0x0012, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"AUDIO_SOURCE", (long) 0x0013, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SOUND", (long) 0x0014, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BONE", (long) 0x0015, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ARMATURE", (long) 0x0016, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"STRING", (long) 0x0017, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FONT", (long) 0x0018, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LABEL", (long) 0x0019, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BUTTON", (long) 0x001A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PICTURE", (long) 0x001B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TEXT_FIELD", (long) 0x001C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SLIDER", (long) 0x001D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCREEN", (long) 0x001E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TEXT_LIST", (long) 0x001F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHECK_BOX", (long) 0x0020, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GUI", (long) 0x0021, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DIRECTORY_ITEM", (long) 0x0022, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DIRECTORY", (long) 0x0023, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COLLISION", (long) 0x0034, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PHYSICS_OBJECT", (long) 0x0035, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PHYSICS_WORLD", (long) 0x0036, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOINT", (long) 0x0037, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PARTICLE", (long) 0x0038, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PARTICLES", (long) 0x0039, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONFIG", (long) 0x003A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BEZIER_POINT", (long) 0x003B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BEZIER_CURVE", (long) 0x003C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"IPO", (long) 0x003D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FRAME_PLAYER", (long) 0x003E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROPERTY", (long) 0x004F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CLIENT", (long) 0x0040, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCRIPTING", (long) 0x0041, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PHYSICS_TRI_MESH", (long) 0x0042, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SPRITE", (long) 0x0043, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"VIDEO_MODE", (long) 0x0044, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GENERAL", (long) 0x0045, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OBJECT_TYPE_COUNT", (long) 0x0046, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PERSPECTIVE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ORTHOGRAPHIC", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BOX", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SPHERE", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MESH", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CAPSULE_X", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CAPSULE_Y", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CAPSULE_Z", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONE_X", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONE_Y", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONE_Z", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"HINGE", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BALL", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CONE_TWIST", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"POINT_LIGHT", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SUN_LIGHT", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SPOT_LIGHT", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LUMINANCE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LUMINANCE_ALPHA", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGB", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGBA", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BGR", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BGRA", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGB16F", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGB32F", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGBA16F", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RGBA32F", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ALPHA32F", (long) 0x000A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DEPTH_COMPONENT", (long) 0x000B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COMPRESSED_RGB", (long) 0x000C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COMPRESSED_RGBA", (long) 0x000D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FLOAT", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"INT", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"UINT", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHORT", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"USHORT", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"BYTE", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"UBYTE", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROPERTY_INT", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROPERTY_FLOAT", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROPERTY_STRING", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"PROPERTY_BOOL", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COLOR_MAP", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NORMAL_MAP", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"HEIGHT_MAP", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SPECULAR_MAP", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DETAIL_MAP", (long) 0x0010, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SHADOW_MAP", (long) 0x0020, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"COLOR_RAMP_MAP", (long) 0x0040, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LIGHT_MAP", (long) 0x0080, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TRANSPARENT", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ADD", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"DIR", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FILE", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CLICKED", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"VALUE_CHANGED", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GAIN_FOCUS", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOSE_FOCUS", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CHAR_INPUT", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SELECTION_CHANGED", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"STATE_CHANGED", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_1", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_2", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_3", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_4", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_5", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_6", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_7", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_8", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_9", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_10", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_11", (long) 0x000A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_12", (long) 0x000B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_13", (long) 0x000C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_14", (long) 0x000D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_15", (long) 0x000E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"JOYSTICK_BUTTON_16", (long) 0x000F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOC_X", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOC_Y", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LOC_Z", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ROT_X", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ROT_Y", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"ROT_Z", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCALE_X", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCALE_Y", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SCALE_Z", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"QUA_X", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"QUA_Y", (long) 0x000A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"QUA_Z", (long) 0x000B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"QUA_W", (long) 0x000C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NET_NONE", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NET_CONNECT", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NET_RECEIVE", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NET_DISCONNECT", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGG", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WAV", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"NO_ERROR", (long) 0x0000, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"INVALID_FILE", (long) 0x0001, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_OPEN_FILE", (long) 0x0002, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_OPEN_DIRECTORY", (long) 0x0003, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_INITIALIZE", (long) 0x0004, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_RUN_STRING", (long) 0x0005, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_RUN_SCRIPT", (long) 0x0006, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_CREATE", (long) 0x0007, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CANT_RESIZE", (long) 0x0008, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"INVALID_SIZE", (long) 0x0009, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"UNKNOWN_FORMAT", (long) 0x000A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"UNKNOWN_TYPE", (long) 0x000B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"INVALID_HANDLE", (long) 0x000C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MISSING_FEATURE", (long) 0x000D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"INVALID_MESH", (long) 0x000E, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_elf_color = {"_p_elf_color", "color *", 0, 0, (void*)&_wrap_class_elf_color, 0};
static swig_type_info _swigt__p_elf_handle = {"_p_elf_handle", "handle *", 0, 0, (void*)&_wrap_class_elf_handle, 0};
static swig_type_info _swigt__p_elf_object = {"_p_elf_object", "object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_elf_vec2f = {"_p_elf_vec2f", "vec2f *", 0, 0, (void*)&_wrap_class_elf_vec2f, 0};
static swig_type_info _swigt__p_elf_vec2i = {"_p_elf_vec2i", "vec2i *", 0, 0, (void*)&_wrap_class_elf_vec2i, 0};
static swig_type_info _swigt__p_elf_vec3f = {"_p_elf_vec3f", "vec3f *", 0, 0, (void*)&_wrap_class_elf_vec3f, 0};
static swig_type_info _swigt__p_elf_vec4f = {"_p_elf_vec4f", "vec4f *", 0, 0, (void*)&_wrap_class_elf_vec4f, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_elf_color,
  &_swigt__p_elf_handle,
  &_swigt__p_elf_object,
  &_swigt__p_elf_vec2f,
  &_swigt__p_elf_vec2i,
  &_swigt__p_elf_vec3f,
  &_swigt__p_elf_vec4f,
};

static swig_cast_info _swigc__p_elf_color[] = {  {&_swigt__p_elf_color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_handle[] = {  {&_swigt__p_elf_handle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_object[] = {  {&_swigt__p_elf_object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_vec2f[] = {  {&_swigt__p_elf_vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_vec2i[] = {  {&_swigt__p_elf_vec2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_vec3f[] = {  {&_swigt__p_elf_vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_elf_vec4f[] = {  {&_swigt__p_elf_vec4f, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_elf_color,
  _swigc__p_elf_handle,
  _swigc__p_elf_object,
  _swigc__p_elf_vec2f,
  _swigc__p_elf_vec2i,
  _swigc__p_elf_vec3f,
  _swigc__p_elf_vec4f,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

